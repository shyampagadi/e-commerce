# Security Stage Configuration
# Comprehensive DevSecOps security scanning and testing

.security_template: &security_template
  stage: security
  artifacts:
    reports:
      sast: gl-sast-report.json
      dependency_scanning: gl-dependency-scanning-report.json
      container_scanning: gl-container-scanning-report.json
      dast: gl-dast-report.json
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_MERGE_REQUEST_ID

# Static Application Security Testing (SAST)
sast-custom:
  <<: *security_template
  image: returntocorp/semgrep:latest
  script:
    - echo "🔍 Running custom SAST analysis..."
    - |
      # Run Semgrep for multiple languages
      semgrep --config=auto --json --output=semgrep-results.json .
      
      # Run Bandit for Python security
      pip install bandit
      bandit -r backend/ -f json -o bandit-results.json || true
      
      # Run ESLint security plugin for JavaScript
      cd frontend
      npm install eslint-plugin-security
      npx eslint . --ext .js,.jsx,.ts,.tsx --format json --output-file ../eslint-security.json || true
      cd ..
    - echo "✅ Custom SAST analysis completed"
  artifacts:
    paths:
      - semgrep-results.json
      - bandit-results.json
      - eslint-security.json
    expire_in: 1 week

# Container Security Scanning
container-security:
  <<: *security_template
  image: aquasec/trivy:latest
  services:
    - docker:20.10.16-dind
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - echo "🐳 Running container security scanning..."
    - |
      # Scan backend container
      trivy image --format json --output backend-security.json $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHA
      
      # Scan frontend container
      trivy image --format json --output frontend-security.json $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHA
      
      # Scan for high/critical vulnerabilities
      trivy image --severity HIGH,CRITICAL --exit-code 1 $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHA
      trivy image --severity HIGH,CRITICAL --exit-code 1 $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHA
    - echo "✅ Container security scanning completed"
  artifacts:
    paths:
      - backend-security.json
      - frontend-security.json
    expire_in: 1 week
  dependencies:
    - build-backend
    - build-frontend

# Dependency Vulnerability Scanning
dependency-security:
  <<: *security_template
  image: node:18-alpine
  script:
    - echo "📦 Running dependency vulnerability scanning..."
    - |
      # Install security scanning tools
      npm install -g audit-ci snyk
      
      # Scan frontend dependencies
      cd frontend
      npm audit --audit-level high --json > ../frontend-audit.json || true
      audit-ci --config ../audit-ci.json || true
      
      # Scan with Snyk (if token available)
      if [ ! -z "$SNYK_TOKEN" ]; then
        snyk auth $SNYK_TOKEN
        snyk test --json > ../frontend-snyk.json || true
      fi
      
      cd ../backend
      
      # Scan Python dependencies with Safety
      pip install safety
      safety check --json --output ../backend-safety.json || true
      
      # Scan with Snyk for Python
      if [ ! -z "$SNYK_TOKEN" ]; then
        snyk test --json > ../backend-snyk.json || true
      fi
    - echo "✅ Dependency vulnerability scanning completed"
  artifacts:
    paths:
      - frontend-audit.json
      - frontend-snyk.json
      - backend-safety.json
      - backend-snyk.json
    expire_in: 1 week

# Dynamic Application Security Testing (DAST)
dast-zap:
  <<: *security_template
  image: owasp/zap2docker-stable:latest
  services:
    - docker:20.10.16-dind
    - postgres:13-alpine
  variables:
    POSTGRES_DB: ecommerce_test
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: test_password
  script:
    - echo "🕷️ Running DAST with OWASP ZAP..."
    - |
      # Start application for testing
      docker-compose -f docker-compose.test.yml up -d
      sleep 60
      
      # Wait for application to be ready
      timeout 300 bash -c 'until curl -f http://localhost:3000; do sleep 5; done'
      
      # Run ZAP baseline scan
      zap-baseline.py -t http://localhost:3000 -J zap-baseline-report.json -r zap-baseline-report.html || true
      
      # Run ZAP full scan (more comprehensive)
      zap-full-scan.py -t http://localhost:3000 -J zap-full-report.json -r zap-full-report.html || true
      
      # API security testing
      zap-api-scan.py -t http://localhost:8000/docs -f openapi -J zap-api-report.json -r zap-api-report.html || true
    - docker-compose -f docker-compose.test.yml down
    - echo "✅ DAST scanning completed"
  artifacts:
    paths:
      - zap-baseline-report.json
      - zap-baseline-report.html
      - zap-full-report.json
      - zap-full-report.html
      - zap-api-report.json
      - zap-api-report.html
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: manual
    - if: $CI_COMMIT_BRANCH == "develop"
      when: manual

# Infrastructure Security Scanning
infrastructure-security:
  <<: *security_template
  image: bridgecrew/checkov:latest
  script:
    - echo "🏗️ Running infrastructure security scanning..."
    - |
      # Scan Terraform files
      checkov -d terraform/ --framework terraform --output json --output-file terraform-security.json || true
      
      # Scan Kubernetes manifests
      checkov -d k8s/ --framework kubernetes --output json --output-file k8s-security.json || true
      
      # Scan Docker files
      checkov -f docker/Dockerfile.backend --framework dockerfile --output json --output-file dockerfile-backend-security.json || true
      checkov -f docker/Dockerfile.frontend --framework dockerfile --output json --output-file dockerfile-frontend-security.json || true
      
      # Scan docker-compose files
      checkov -f docker-compose.yml --framework docker_compose --output json --output-file docker-compose-security.json || true
    - echo "✅ Infrastructure security scanning completed"
  artifacts:
    paths:
      - terraform-security.json
      - k8s-security.json
      - dockerfile-backend-security.json
      - dockerfile-frontend-security.json
      - docker-compose-security.json
    expire_in: 1 week

# Secret Detection (Enhanced)
secret-detection-custom:
  <<: *security_template
  image: trufflesecurity/trufflehog:latest
  script:
    - echo "🔐 Running enhanced secret detection..."
    - |
      # Scan entire repository history
      trufflehog git file://. --json > trufflehog-results.json || true
      
      # Scan specific file types
      trufflehog filesystem . --json --only-verified > trufflehog-verified.json || true
      
      # Additional secret scanning with detect-secrets
      pip install detect-secrets
      detect-secrets scan --all-files --baseline .secrets.baseline || true
    - echo "✅ Enhanced secret detection completed"
  artifacts:
    paths:
      - trufflehog-results.json
      - trufflehog-verified.json
      - .secrets.baseline
    expire_in: 1 week

# License Compliance Scanning
license-compliance:
  <<: *security_template
  image: licensefinder/license_finder:latest
  script:
    - echo "📄 Running license compliance scanning..."
    - |
      # Scan frontend dependencies
      cd frontend
      license_finder --format json --columns name,version,licenses,license_links > ../frontend-licenses.json || true
      
      cd ../backend
      
      # Scan Python dependencies
      pip install pip-licenses
      pip-licenses --format json --output-file ../backend-licenses.json || true
      
      # Check for GPL and other restrictive licenses
      license_finder --format json --decisions-file ../license-decisions.yml > ../license-compliance.json || true
    - echo "✅ License compliance scanning completed"
  artifacts:
    paths:
      - frontend-licenses.json
      - backend-licenses.json
      - license-compliance.json
    expire_in: 1 week

# Security Report Aggregation
security-report:
  stage: security
  image: alpine:latest
  script:
    - echo "📊 Aggregating security reports..."
    - |
      apk add --no-cache jq curl
      
      # Create comprehensive security report
      cat > security-summary.json << EOF
      {
        "scan_date": "$(date -Iseconds)",
        "commit_sha": "$CI_COMMIT_SHA",
        "branch": "$CI_COMMIT_REF_NAME",
        "pipeline_id": "$CI_PIPELINE_ID",
        "reports": {
          "sast": "semgrep-results.json",
          "container": "backend-security.json,frontend-security.json",
          "dependencies": "frontend-audit.json,backend-safety.json",
          "dast": "zap-baseline-report.json",
          "infrastructure": "terraform-security.json,k8s-security.json",
          "secrets": "trufflehog-results.json",
          "licenses": "license-compliance.json"
        }
      }
      EOF
      
      # Send to security dashboard (if configured)
      if [ ! -z "$SECURITY_WEBHOOK_URL" ]; then
        curl -X POST -H "Content-Type: application/json" -d @security-summary.json $SECURITY_WEBHOOK_URL || true
      fi
    - echo "✅ Security report aggregation completed"
  artifacts:
    paths:
      - security-summary.json
    expire_in: 1 month
  dependencies:
    - sast-custom
    - container-security
    - dependency-security
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"
