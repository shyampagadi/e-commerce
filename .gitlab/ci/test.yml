# Test Stage Configuration
# Comprehensive testing including unit, integration, and E2E tests

.test_template: &test_template
  stage: test
  services:
    - postgres:13-alpine
  variables:
    POSTGRES_DB: ecommerce_test
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: test_password
    DATABASE_URL: "postgresql://postgres:test_password@postgres:5432/ecommerce_test"
  before_script:
    - echo "ðŸ§ª Setting up test environment..."
    - apt-get update -qq && apt-get install -y -qq git curl
  artifacts:
    reports:
      junit: test-results.xml
      coverage: coverage.xml
    paths:
      - coverage/
      - test-results/
    expire_in: 1 week
  coverage: '/TOTAL.*\s+(\d+%)$/'

# Backend Unit Tests
test-backend-unit:
  <<: *test_template
  image: python:3.11-slim
  script:
    - echo "ðŸ§ª Running backend unit tests..."
    - cd backend
    - pip install --upgrade pip
    - pip install -r requirements.txt
    - pip install pytest pytest-cov pytest-asyncio
    - |
      # Wait for PostgreSQL to be ready
      until pg_isready -h postgres -p 5432 -U postgres; do
        echo "Waiting for PostgreSQL..."
        sleep 2
      done
    - python -m pytest tests/ -v --cov=app --cov-report=xml --cov-report=html --junitxml=test-results.xml
    - echo "âœ… Backend unit tests completed"
  rules:
    - changes:
        - backend/**/*
        - requirements.txt
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_MERGE_REQUEST_ID

# Frontend Unit Tests
test-frontend-unit:
  <<: *test_template
  image: node:18-alpine
  script:
    - echo "ðŸ§ª Running frontend unit tests..."
    - cd frontend
    - npm ci --cache .npm --prefer-offline
    - npm run test:coverage
    - echo "âœ… Frontend unit tests completed"
  artifacts:
    reports:
      junit: frontend/test-results.xml
      coverage: frontend/coverage/lcov.info
    paths:
      - frontend/coverage/
    expire_in: 1 week
  rules:
    - changes:
        - frontend/**/*
        - package*.json
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_MERGE_REQUEST_ID

# Integration Tests
test-integration:
  stage: test
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
    - postgres:13-alpine
  variables:
    POSTGRES_DB: ecommerce_test
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: test_password
  script:
    - echo "ðŸ”— Running integration tests..."
    - docker-compose -f docker-compose.test.yml up -d
    - sleep 30  # Wait for services to be ready
    - |
      # Run integration tests
      docker-compose -f docker-compose.test.yml exec -T backend python -m pytest tests/integration/ -v
      docker-compose -f docker-compose.test.yml exec -T frontend npm run test:integration
    - docker-compose -f docker-compose.test.yml down
    - echo "âœ… Integration tests completed"
  artifacts:
    reports:
      junit: integration-test-results.xml
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_MERGE_REQUEST_ID

# End-to-End Tests with Playwright
test-e2e:
  stage: test
  image: mcr.microsoft.com/playwright:v1.40.0-focal
  services:
    - docker:20.10.16-dind
    - postgres:13-alpine
  variables:
    POSTGRES_DB: ecommerce_test
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: test_password
    CI: "true"
  script:
    - echo "ðŸŽ­ Running E2E tests with Playwright..."
    - cd tests
    - npm ci
    - npx playwright install --with-deps
    - |
      # Start application services
      docker-compose -f ../docker-compose.test.yml up -d
      sleep 60  # Wait for services to be fully ready
      
      # Wait for backend to be healthy
      timeout 300 bash -c 'until curl -f http://localhost:8000/health; do sleep 5; done'
      
      # Wait for frontend to be ready
      timeout 300 bash -c 'until curl -f http://localhost:3000; do sleep 5; done'
      
      # Run E2E tests
      npx playwright test --reporter=junit
    - docker-compose -f ../docker-compose.test.yml down
    - echo "âœ… E2E tests completed"
  artifacts:
    reports:
      junit: tests/test-results/results.xml
    paths:
      - tests/test-results/
      - tests/playwright-report/
    expire_in: 1 week
    when: always
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_MERGE_REQUEST_ID
      when: manual

# Performance Tests
test-performance:
  stage: test
  image: grafana/k6:latest
  script:
    - echo "âš¡ Running performance tests..."
    - |
      # Start application for testing
      docker-compose -f docker-compose.test.yml up -d
      sleep 60
      
      # Run K6 performance tests
      k6 run --out json=performance-results.json tests/performance/load-test.js
      k6 run --out json=stress-results.json tests/performance/stress-test.js
    - docker-compose -f docker-compose.test.yml down
    - echo "âœ… Performance tests completed"
  artifacts:
    reports:
      performance: performance-results.json
    paths:
      - performance-results.json
      - stress-results.json
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: manual
    - if: $CI_COMMIT_TAG
      when: manual

# API Tests
test-api:
  stage: test
  image: postman/newman:alpine
  services:
    - docker:20.10.16-dind
    - postgres:13-alpine
  script:
    - echo "ðŸ“¡ Running API tests..."
    - |
      # Start backend service
      docker-compose -f docker-compose.test.yml up -d backend
      sleep 30
      
      # Run Newman API tests
      newman run tests/api/postman-collection.json \
        --environment tests/api/test-environment.json \
        --reporters cli,junit \
        --reporter-junit-export api-test-results.xml
    - docker-compose -f docker-compose.test.yml down
    - echo "âœ… API tests completed"
  artifacts:
    reports:
      junit: api-test-results.xml
    expire_in: 1 week
  rules:
    - changes:
        - backend/**/*
        - tests/api/**/*
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"

# Code Quality Analysis
code-quality:
  stage: test
  image: sonarqube/sonar-scanner-cli:latest
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0"
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - echo "ðŸ“Š Running code quality analysis..."
    - |
      sonar-scanner \
        -Dsonar.projectKey=$CI_PROJECT_NAME \
        -Dsonar.sources=. \
        -Dsonar.host.url=$SONAR_HOST_URL \
        -Dsonar.login=$SONAR_TOKEN \
        -Dsonar.exclusions="**/node_modules/**,**/venv/**,**/*.test.js,**/*.spec.js" \
        -Dsonar.coverage.exclusions="**/tests/**,**/test/**" \
        -Dsonar.javascript.lcov.reportPaths=frontend/coverage/lcov.info \
        -Dsonar.python.coverage.reportPaths=backend/coverage.xml
    - echo "âœ… Code quality analysis completed"
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_MERGE_REQUEST_ID
  allow_failure: true
