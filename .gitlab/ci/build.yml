# Build Stage Configuration
# Handles building Docker images for backend and frontend

.build_template: &build_template
  stage: build
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - docker info
  after_script:
    - docker logout $CI_REGISTRY
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_MERGE_REQUEST_ID

build-backend:
  <<: *build_template
  script:
    - echo "🏗️ Building backend Docker image..."
    - |
      docker build \
        -f docker/Dockerfile.backend \
        -t $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHA \
        -t $CI_REGISTRY_IMAGE/backend:latest \
        --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
        --build-arg VCS_REF=$CI_COMMIT_SHA \
        --build-arg VERSION=$CI_COMMIT_TAG \
        .
    - docker push $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE/backend:latest
    - echo "✅ Backend image built and pushed successfully"
  artifacts:
    reports:
      dotenv: build.env
    expire_in: 1 hour
  variables:
    DOCKER_BUILDKIT: 1

build-frontend:
  <<: *build_template
  script:
    - echo "🏗️ Building frontend Docker image..."
    - |
      docker build \
        -f docker/Dockerfile.frontend \
        -t $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHA \
        -t $CI_REGISTRY_IMAGE/frontend:latest \
        --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
        --build-arg VCS_REF=$CI_COMMIT_SHA \
        --build-arg VERSION=$CI_COMMIT_TAG \
        --build-arg REACT_APP_API_URL=$REACT_APP_API_URL \
        .
    - docker push $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE/frontend:latest
    - echo "✅ Frontend image built and pushed successfully"
  artifacts:
    reports:
      dotenv: build.env
    expire_in: 1 hour
  variables:
    DOCKER_BUILDKIT: 1

# Multi-architecture build (optional)
build-multiarch:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  before_script:
    - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    - docker buildx create --use --name multiarch
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - echo "🏗️ Building multi-architecture images..."
    - |
      docker buildx build \
        --platform linux/amd64,linux/arm64 \
        -f docker/Dockerfile.backend \
        -t $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHA-multiarch \
        --push \
        .
    - |
      docker buildx build \
        --platform linux/amd64,linux/arm64 \
        -f docker/Dockerfile.frontend \
        -t $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHA-multiarch \
        --push \
        .
    - echo "✅ Multi-architecture images built successfully"
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: manual
    - if: $CI_COMMIT_TAG
      when: manual

# Build optimization and caching
build-with-cache:
  stage: build
  script:
    - echo "🏗️ Building with advanced caching..."
    - |
      # Backend with cache
      docker build \
        -f docker/Dockerfile.backend \
        -t $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHA \
        --cache-from $CI_REGISTRY_IMAGE/backend:latest \
        --build-arg BUILDKIT_INLINE_CACHE=1 \
        .
      
      # Frontend with cache
      docker build \
        -f docker/Dockerfile.frontend \
        -t $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHA \
        --cache-from $CI_REGISTRY_IMAGE/frontend:latest \
        --build-arg BUILDKIT_INLINE_CACHE=1 \
        .
    - docker push $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHA
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
  variables:
    DOCKER_BUILDKIT: 1
