# ðŸš€ Production Docker Compose Configuration
# Optimized for production deployment with security and performance

version: '3.8'

services:
  # Production Database with backup
  database:
    image: postgres:15-alpine
    container_name: ecommerce-db-prod
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./database/backup:/backup
    networks:
      - ecommerce-prod
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
    # No port exposure for security
    expose:
      - "5432"

  # Production Backend
  backend:
    image: ${DOCKER_REGISTRY}/ecommerce-backend:${IMAGE_TAG}
    container_name: ecommerce-backend-prod
    restart: always
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@database:5432/${POSTGRES_DB}
      SECRET_KEY: ${SECRET_KEY}
      DEBUG: "false"
      ENVIRONMENT: production
    volumes:
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
    depends_on:
      database:
        condition: service_healthy
    networks:
      - ecommerce-prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    # No direct port exposure
    expose:
      - "8000"

  # Production Frontend
  frontend:
    image: ${DOCKER_REGISTRY}/ecommerce-frontend:${IMAGE_TAG}
    container_name: ecommerce-frontend-prod
    restart: always
    depends_on:
      - backend
    networks:
      - ecommerce-prod
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
    # No direct port exposure
    expose:
      - "80"

  # Production Load Balancer
  nginx:
    image: nginx:alpine
    container_name: ecommerce-nginx-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - ecommerce-prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for production caching
  redis:
    image: redis:7-alpine
    container_name: ecommerce-redis-prod
    restart: always
    volumes:
      - redis_prod_data:/data
      - ./redis/prod.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - ecommerce-prod
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "auth", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

volumes:
  postgres_prod_data:
    driver: local
  redis_prod_data:
    driver: local
  backend_uploads:
    driver: local
  backend_logs:
    driver: local
  nginx_logs:
    driver: local

networks:
  ecommerce-prod:
    driver: bridge
    driver_opts:
      encrypted: "true"
