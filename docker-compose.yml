version: '3.8'

# ===========================================
# E-COMMERCE APPLICATION DOCKER COMPOSE
# ===========================================
# This file defines all services needed for the e-commerce application
# Services will start in this order: Database → Setup → Backend → Frontend

services:
  # ===========================================
  # SERVICE 1: PostgreSQL Database
  # ===========================================
  # TODO: Add PostgreSQL service
  # - Use postgres:15-alpine image
  # - Set container name: ecommerce-db
  # - Environment: POSTGRES_DB, POSTGRES_USER, POSTGRES_PASSWORD
  # - Port: 5432:5432
  # - Volume: postgres_data for persistence
  # - Health check: pg_isready command
  
  database:
    # Add your database configuration here
    image: postgres:17.6-alpine
    container_name: ecommerce_db
    restart: unless-stopped

    environment:
      POSTGRES_DB: ecommerce_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"

    ports:
      - 5432:5432

    volumes:
      - postgres_data:/var/lib/postgresql/data

    networks:
      - ecommerce-network

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ecommerce_db"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s



  # ===========================================
  # SERVICE 2: Database Setup (Runs Once)
  # ===========================================
  # TODO: Add database setup service
  # - Build from ./backend/Dockerfile
  # - Set container name: ecommerce-db-setup
  # - Environment: DATABASE_URL and DB connection details
  # - Command: python database/setup.py --all
  # - Volumes: Mount ./database and ./backend folders
  # - Depends on: database (healthy)
  # - Restart: "no" (run once and exit)
    
  db-setup:
    # Add your database setup configuration here
    build: 
      context: .
      dockerfile: ./backend/Dockerfile

    container_name: ecommerce-db-setup

    environment:
      DATABASE_URL: postgresql://postgres:admin@database:5432/ecommerce_db
      DB_HOST: database
      DB_PORT: 5432
      DB_NAME: ecommerce_db
      DB_USER: postgres
      DB_PASSWORD: admin

    command: python database/setup.py --all

    volumes:
      - ./database:/app/database
      - ./backend:/app

    networks:
      - ecommerce-network

    depends_on:
      database:
        condition: service_healthy

    restart: "no"


  # ===========================================
  # SERVICE 3: Backend API (FastAPI)
  # ===========================================
  # TODO: Add backend service
  # - Build from ./backend/Dockerfile
  # - Set container name: ecommerce-backend
  # - Environment: DATABASE_URL, SECRET_KEY, CORS settings
  # - Port: 8000:8000
  # - Volumes: Mount ./backend and uploads volume
  # - Depends on: database (healthy) AND db-setup (completed)
  # - Health check: curl to /health endpoint
  
  backend:
    # Add your backend configuration here
    build:
      context: .
      dockerfile: ./backend/Dockerfile
    
    container_name: ecommerce-backend
    restart: unless-stopped
    
    environment:
      DATABASE_URL: postgresql://postgres:admin@database:5432/ecommerce_db
      SECRET_KEY: dev-secret-key-change-in-production
      DEBUG: "true"
      BACKEND_CORS_ORIGINS: '["http://localhost:3000"]'

    ports:
      - 8000:8000

    volumes:
      - ./backend:/app
      - backend_uploads:/app/uploads

    networks:
      - ecommerce-network

    depends_on:
      database:
          condition: service_healthy
      db-setup:
          condition: service_completed_successfully

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3


  # ===========================================
  # SERVICE 4: Frontend (React)
  # ===========================================
  # TODO: Add frontend service
  # - Build from ./frontend/Dockerfile
  # - Set container name: ecommerce-frontend
  # - Environment: REACT_APP_API_URL settings
  # - Port: 3000:3000
  # - Volumes: Mount ./frontend folder
  # - Depends on: backend (healthy)
  
  frontend:
    # Add your frontend configuration here
    build:
      context: .
      dockerfile: ./frontend/Dockerfile
    
    container_name: ecommerce-frontend
    restart: unless-stopped
    
    environment:
      REACT_APP_API_URL: http://localhost:8000
      REACT_APP_API_BASE_URL: http://localhost:8000/api/v1
    
    ports:
      - "3000:80"
    
    volumes:
      - ./frontend:/app:ro
      - /app/node_modules
    
    networks:
      - ecommerce-network
    
    depends_on:
      backend:
        condition: service_healthy
# ===========================================
# NETWORKS
# ===========================================
# TODO: Define network for service communication
networks:
  # Add ecommerce-network here
  ecommerce-network:
    driver: bridge


# ===========================================
# VOLUMES
# ===========================================
# TODO: Define persistent volumes
volumes:
  # Add postgres_data volume here
  # Add backend_uploads volume here
  postgres_data:
    driver: local

  backend_uploads:
    driver: local

# ===========================================
# INSTRUCTIONS FOR COMPLETION:
# ===========================================
# 1. Fill in each service configuration
# 2. Add proper environment variables
# 3. Set up volume mounts correctly
# 4. Configure health checks
# 5. Set service dependencies
# 6. Test with: docker-compose up -d
