# =============================================================================
# SERVICES FOR CORE WORKLOADS DEPLOYMENT
# =============================================================================
# Purpose: Exposes application deployments and enables service discovery
# Why needed: Provides stable network endpoints for pods and external access
# Kubernetes concept: Services provide stable IP addresses and DNS names for pods
# This file will be built section by section to avoid token limits

---
# =============================================================================
# BACKEND API SERVICE
# =============================================================================
# Purpose: Exposes the FastAPI backend deployment for internal and external access
# Why needed: Provides stable endpoint for frontend and external clients to access backend
# Kubernetes concept: Service provides load balancing and service discovery for backend pods

apiVersion: v1
# API Version: v1 is the stable version for Service resources
# This is the most commonly used API version for service definitions

kind: Service
# Resource Type: Service provides stable network access to a set of pods
# This enables load balancing and service discovery for backend pods

metadata:
  # Metadata section contains identifying information about the resource
  name: ecommerce-backend-service
  # Name: Unique identifier for this Service within the namespace
  # This name will be used for DNS resolution and service discovery
  
  namespace: ecommerce
  # Namespace: Specifies which namespace this Service belongs to
  # Must match the namespace created in the namespace.yaml file
  
  labels:
    # Labels: Key-value pairs for organizing and selecting resources
    app: ecommerce
    # app: ecommerce - Identifies this Service as belonging to the e-commerce app
    component: backend
    # component: backend - Identifies this as a backend service
    tier: application
    # tier: application - Identifies this as application tier
    environment: production
    # environment: production - Indicates this is for production environment
    managed-by: kubernetes
    # managed-by: kubernetes - Indicates this resource is managed by Kubernetes
  
  annotations:
    # Annotations: Additional metadata that doesn't affect resource behavior
    description: "E-commerce FastAPI backend service for Core Workloads Deployment"
    # description: Human-readable description of the Service purpose
    # Used for documentation and operational understanding
    
    contact: "platform-engineering@company.com"
    # contact: Email address for the team responsible for this Service
    # Used for incident response and maintenance coordination
    
    last-updated: "2024-12-01T00:00:00Z"
    # last-updated: Timestamp of last service update
    # Used for change tracking and audit trails
    
    version: "1.0.0"
    # version: Version of the service configuration
    # Used for service versioning and rollback

spec:
  # Specification section defines the actual service configuration
  
  # =============================================================================
  # SERVICE TYPE
  # =============================================================================
  type: ClusterIP
  # type: ClusterIP - Service type
  # Value: ClusterIP - Internal cluster IP address
  # Purpose: Provides internal cluster access only
  # Impact: Service is accessible only within the cluster
  # Production consideration: Secure internal communication
  
  # =============================================================================
  # PORT CONFIGURATION
  # =============================================================================
  ports:
    # ports: Array of ports exposed by this service
    - name: http
      # name: http - Port name
      # Purpose: Identifies this port for service discovery
      # Impact: Port can be referenced by name in other resources
      # Production consideration: Enables clear port identification
      
      port: 8000
      # port: 8000 - Service port
      # Value: 8000 - Port number for external access
      # Purpose: Port through which service is accessed
      # Impact: Clients connect to this port
      # Production consideration: Matches FastAPI application port
      
      targetPort: 8000
      # targetPort: 8000 - Target port on pods
      # Value: 8000 - Port on backend pods
      # Purpose: Port on backend pods to forward traffic to
      # Impact: Traffic is forwarded to port 8000 on backend pods
      # Production consideration: Must match container port
      
      protocol: TCP
      # protocol: TCP - Port protocol
      # Value: TCP - Transmission Control Protocol
      # Purpose: Specifies the network protocol
      # Impact: Port uses TCP protocol
      # Production consideration: Standard protocol for web services
    
    - name: metrics
      # name: metrics - Port name
      # Purpose: Identifies this port for metrics collection
      # Impact: Port can be referenced by name for monitoring
      # Production consideration: Enables metrics collection
      
      port: 9090
      # port: 9090 - Service port
      # Value: 9090 - Port number for metrics access
      # Purpose: Port through which metrics are accessed
      # Impact: Monitoring systems connect to this port
      # Production consideration: Standard port for Prometheus metrics
      
      targetPort: 9090
      # targetPort: 9090 - Target port on pods
      # Value: 9090 - Port on backend pods
      # Purpose: Port on backend pods to forward metrics traffic to
      # Impact: Metrics traffic is forwarded to port 9090 on backend pods
      # Production consideration: Must match container metrics port
      
      protocol: TCP
      # protocol: TCP - Port protocol
      # Value: TCP - Transmission Control Protocol
      # Purpose: Specifies the network protocol
      # Impact: Port uses TCP protocol
      # Production consideration: Standard protocol for metrics
  
  # =============================================================================
  # SELECTOR CONFIGURATION
  # =============================================================================
  selector:
    # selector: Defines which pods this Service routes traffic to
    app: ecommerce
    # app: ecommerce - Pods must have this label
    # Purpose: Routes traffic to e-commerce application pods
    # Impact: Only pods with this label receive traffic
    # Production consideration: Ensures correct pod selection
    
    component: backend
    # component: backend - Pods must have this label
    # Purpose: Routes traffic to backend pods specifically
    # Impact: Only backend pods receive traffic
    # Production consideration: Prevents traffic to wrong components
    
    tier: application
    # tier: application - Pods must have this label
    # Purpose: Routes traffic to application tier pods
    # Impact: Only application tier pods receive traffic
    # Production consideration: Ensures proper tier isolation

---
# =============================================================================
# FRONTEND SERVICE
# =============================================================================
# Purpose: Exposes the React frontend deployment for internal and external access
# Why needed: Provides stable endpoint for users and external clients to access frontend
# Kubernetes concept: Service provides load balancing and service discovery for frontend pods

apiVersion: v1
# API Version: v1 is the stable version for Service resources
# This is the most commonly used API version for service definitions

kind: Service
# Resource Type: Service provides stable network access to a set of pods
# This enables load balancing and service discovery for frontend pods

metadata:
  # Metadata section contains identifying information about the resource
  name: ecommerce-frontend-service
  # Name: Unique identifier for this Service within the namespace
  # This name will be used for DNS resolution and service discovery
  
  namespace: ecommerce
  # Namespace: Specifies which namespace this Service belongs to
  # Must match the namespace created in the namespace.yaml file
  
  labels:
    # Labels: Key-value pairs for organizing and selecting resources
    app: ecommerce
    # app: ecommerce - Identifies this Service as belonging to the e-commerce app
    component: frontend
    # component: frontend - Identifies this as a frontend service
    tier: presentation
    # tier: presentation - Identifies this as presentation tier
    environment: production
    # environment: production - Indicates this is for production environment
    managed-by: kubernetes
    # managed-by: kubernetes - Indicates this resource is managed by Kubernetes
  
  annotations:
    # Annotations: Additional metadata that doesn't affect resource behavior
    description: "E-commerce React frontend service for Core Workloads Deployment"
    # description: Human-readable description of the Service purpose
    # Used for documentation and operational understanding
    
    contact: "frontend-team@company.com"
    # contact: Email address for the team responsible for this Service
    # Used for incident response and maintenance coordination
    
    last-updated: "2024-12-01T00:00:00Z"
    # last-updated: Timestamp of last service update
    # Used for change tracking and audit trails
    
    version: "1.0.0"
    # version: Version of the service configuration
    # Used for service versioning and rollback

spec:
  # Specification section defines the actual service configuration
  
  # =============================================================================
  # SERVICE TYPE
  # =============================================================================
  type: ClusterIP
  # type: ClusterIP - Service type
  # Value: ClusterIP - Internal cluster IP address
  # Purpose: Provides internal cluster access only
  # Impact: Service is accessible only within the cluster
  # Production consideration: Secure internal communication
  
  # =============================================================================
  # PORT CONFIGURATION
  # =============================================================================
  ports:
    # ports: Array of ports exposed by this service
    - name: http
      # name: http - Port name
      # Purpose: Identifies this port for service discovery
      # Impact: Port can be referenced by name in other resources
      # Production consideration: Enables clear port identification
      
      port: 3000
      # port: 3000 - Service port
      # Value: 3000 - Port number for external access
      # Purpose: Port through which service is accessed
      # Impact: Clients connect to this port
      # Production consideration: Matches React development server port
      
      targetPort: 3000
      # targetPort: 3000 - Target port on pods
      # Value: 3000 - Port on frontend pods
      # Purpose: Port on frontend pods to forward traffic to
      # Impact: Traffic is forwarded to port 3000 on frontend pods
      # Production consideration: Must match container port
      
      protocol: TCP
      # protocol: TCP - Port protocol
      # Value: TCP - Transmission Control Protocol
      # Purpose: Specifies the network protocol
      # Impact: Port uses TCP protocol
      # Production consideration: Standard protocol for web services
    
    - name: metrics
      # name: metrics - Port name
      # Purpose: Identifies this port for metrics collection
      # Impact: Port can be referenced by name for monitoring
      # Production consideration: Enables metrics collection
      
      port: 9090
      # port: 9090 - Service port
      # Value: 9090 - Port number for metrics access
      # Purpose: Port through which metrics are accessed
      # Impact: Monitoring systems connect to this port
      # Production consideration: Standard port for Prometheus metrics
      
      targetPort: 9090
      # targetPort: 9090 - Target port on pods
      # Value: 9090 - Port on frontend pods
      # Purpose: Port on frontend pods to forward metrics traffic to
      # Impact: Metrics traffic is forwarded to port 9090 on frontend pods
      # Production consideration: Must match container metrics port
      
      protocol: TCP
      # protocol: TCP - Port protocol
      # Value: TCP - Transmission Control Protocol
      # Purpose: Specifies the network protocol
      # Impact: Port uses TCP protocol
      # Production consideration: Standard protocol for metrics
  
  # =============================================================================
  # SELECTOR CONFIGURATION
  # =============================================================================
  selector:
    # selector: Defines which pods this Service routes traffic to
    app: ecommerce
    # app: ecommerce - Pods must have this label
    # Purpose: Routes traffic to e-commerce application pods
    # Impact: Only pods with this label receive traffic
    # Production consideration: Ensures correct pod selection
    
    component: frontend
    # component: frontend - Pods must have this label
    # Purpose: Routes traffic to frontend pods specifically
    # Impact: Only frontend pods receive traffic
    # Production consideration: Prevents traffic to wrong components
    
    tier: presentation
    # tier: presentation - Pods must have this label
    # Purpose: Routes traffic to presentation tier pods
    # Impact: Only presentation tier pods receive traffic
    # Production consideration: Ensures proper tier isolation

---
# =============================================================================
# DATABASE SERVICE
# =============================================================================
# Purpose: Exposes the PostgreSQL database deployment for internal access
# Why needed: Provides stable endpoint for backend to access database
# Kubernetes concept: Service provides load balancing and service discovery for database pods

apiVersion: v1
# API Version: v1 is the stable version for Service resources
# This is the most commonly used API version for service definitions

kind: Service
# Resource Type: Service provides stable network access to a set of pods
# This enables load balancing and service discovery for database pods

metadata:
  # Metadata section contains identifying information about the resource
  name: ecommerce-database-service
  # Name: Unique identifier for this Service within the namespace
  # This name will be used for DNS resolution and service discovery
  
  namespace: ecommerce
  # Namespace: Specifies which namespace this Service belongs to
  # Must match the namespace created in the namespace.yaml file
  
  labels:
    # Labels: Key-value pairs for organizing and selecting resources
    app: ecommerce
    # app: ecommerce - Identifies this Service as belonging to the e-commerce app
    component: database
    # component: database - Identifies this as a database service
    tier: data
    # tier: data - Identifies this as data tier
    environment: production
    # environment: production - Indicates this is for production environment
    managed-by: kubernetes
    # managed-by: kubernetes - Indicates this resource is managed by Kubernetes
  
  annotations:
    # Annotations: Additional metadata that doesn't affect resource behavior
    description: "E-commerce PostgreSQL database service for Core Workloads Deployment"
    # description: Human-readable description of the Service purpose
    # Used for documentation and operational understanding
    
    contact: "database-team@company.com"
    # contact: Email address for the team responsible for this Service
    # Used for incident response and maintenance coordination
    
    last-updated: "2024-12-01T00:00:00Z"
    # last-updated: Timestamp of last service update
    # Used for change tracking and audit trails
    
    version: "1.0.0"
    # version: Version of the service configuration
    # Used for service versioning and rollback

spec:
  # Specification section defines the actual service configuration
  
  # =============================================================================
  # SERVICE TYPE
  # =============================================================================
  type: ClusterIP
  # type: ClusterIP - Service type
  # Value: ClusterIP - Internal cluster IP address
  # Purpose: Provides internal cluster access only
  # Impact: Service is accessible only within the cluster
  # Production consideration: Secure internal communication for database
  
  # =============================================================================
  # PORT CONFIGURATION
  # =============================================================================
  ports:
    # ports: Array of ports exposed by this service
    - name: postgres
      # name: postgres - Port name
      # Purpose: Identifies this port for service discovery
      # Impact: Port can be referenced by name in other resources
      # Production consideration: Enables clear port identification
      
      port: 5432
      # port: 5432 - Service port
      # Value: 5432 - Port number for external access
      # Purpose: Port through which service is accessed
      # Impact: Clients connect to this port
      # Production consideration: Matches PostgreSQL standard port
      
      targetPort: 5432
      # targetPort: 5432 - Target port on pods
      # Value: 5432 - Port on database pods
      # Purpose: Port on database pods to forward traffic to
      # Impact: Traffic is forwarded to port 5432 on database pods
      # Production consideration: Must match container port
      
      protocol: TCP
      # protocol: TCP - Port protocol
      # Value: TCP - Transmission Control Protocol
      # Purpose: Specifies the network protocol
      # Impact: Port uses TCP protocol
      # Production consideration: Standard protocol for PostgreSQL
    
    - name: metrics
      # name: metrics - Port name
      # Purpose: Identifies this port for metrics collection
      # Impact: Port can be referenced by name for monitoring
      # Production consideration: Enables metrics collection
      
      port: 9187
      # port: 9187 - Service port
      # Value: 9187 - Port number for metrics access
      # Purpose: Port through which metrics are accessed
      # Impact: Monitoring systems connect to this port
      # Production consideration: Standard port for PostgreSQL metrics
      
      targetPort: 9187
      # targetPort: 9187 - Target port on pods
      # Value: 9187 - Port on database pods
      # Purpose: Port on database pods to forward metrics traffic to
      # Impact: Metrics traffic is forwarded to port 9187 on database pods
      # Production consideration: Must match container metrics port
      
      protocol: TCP
      # protocol: TCP - Port protocol
      # Value: TCP - Transmission Control Protocol
      # Purpose: Specifies the network protocol
      # Impact: Port uses TCP protocol
      # Production consideration: Standard protocol for metrics
  
  # =============================================================================
  # SELECTOR CONFIGURATION
  # =============================================================================
  selector:
    # selector: Defines which pods this Service routes traffic to
    app: ecommerce
    # app: ecommerce - Pods must have this label
    # Purpose: Routes traffic to e-commerce application pods
    # Impact: Only pods with this label receive traffic
    # Production consideration: Ensures correct pod selection
    
    component: database
    # component: database - Pods must have this label
    # Purpose: Routes traffic to database pods specifically
    # Impact: Only database pods receive traffic
    # Production consideration: Prevents traffic to wrong components
    
    tier: data
    # tier: data - Pods must have this label
    # Purpose: Routes traffic to data tier pods
    # Impact: Only data tier pods receive traffic
    # Production consideration: Ensures proper tier isolation
