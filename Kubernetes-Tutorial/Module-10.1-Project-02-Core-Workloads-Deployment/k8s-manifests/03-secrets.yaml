# =============================================================================
# SECRETS FOR CORE WORKLOADS DEPLOYMENT
# =============================================================================
# Purpose: Stores sensitive configuration data such as passwords, API keys,
# certificates, and tokens that should not be stored in plain text
# Why needed: Provides secure storage for sensitive data, enables secret rotation,
# and prevents sensitive information from being exposed in container images
# Kubernetes concept: Secrets store sensitive data that can be consumed by pods
# as environment variables or mounted as files in volumes

# =============================================================================
# DATABASE SECRETS
# =============================================================================
# Purpose: Stores database connection credentials and sensitive configuration
# Why needed: Secures database access credentials and prevents credential exposure
# Kubernetes concept: Secrets provide encrypted storage for sensitive data

apiVersion: v1
# API Version: v1 is the stable version for Secret resources
# This is the most commonly used API version for secret management

kind: Secret
# Resource Type: Secret stores sensitive data in encrypted format
# This provides secure storage for passwords, tokens, and other sensitive information
# Secrets are base64 encoded and can be consumed by pods

metadata:
  # Metadata section contains identifying information about the resource
  name: postgresql-secrets
  # Name: Unique identifier for this Secret within the namespace
  # This name will be used to reference the Secret in pod specifications
  
  namespace: ecommerce
  # Namespace: Specifies which namespace this Secret belongs to
  # Must match the namespace created in the namespace.yaml file
  
  labels:
    # Labels: Key-value pairs for organizing and selecting resources
    app: ecommerce
    # app: ecommerce - Identifies this Secret as belonging to the e-commerce app
    component: database
    # component: database - Identifies this as a database component
    tier: data
    # tier: data - Identifies this as data tier
    environment: production
    # environment: production - Indicates this is for production environment
    managed-by: kubernetes
    # managed-by: kubernetes - Indicates this resource is managed by Kubernetes
  
  annotations:
    # Annotations: Additional metadata that doesn't affect resource behavior
    description: "PostgreSQL database credentials for e-commerce Core Workloads Deployment"
    # description: Human-readable description of the Secret purpose
    # Used for documentation and operational understanding
    
    contact: "platform-engineering@company.com"
    # contact: Email address for the team responsible for this Secret
    # Used for incident response and maintenance coordination
    
    last-updated: "2024-12-01T00:00:00Z"
    # last-updated: Timestamp of last secret update
    # Used for change tracking and audit trails
    
    version: "1.0.0"
    # version: Version of the secret configuration
    # Used for secret versioning and rollback
    
    rotation-policy: "monthly"
    # rotation-policy: Secret rotation frequency
    # Value: monthly - Rotate secrets monthly
    # Purpose: Ensures regular secret rotation for security
    # Impact: Secrets are rotated every month
    # Security benefit: Reduces risk of compromised credentials

type: Opaque
# type: Opaque - Generic secret type
# Value: Opaque - Standard secret type for arbitrary data
# Purpose: Indicates this is a generic secret for arbitrary data
# Impact: Secret can contain any type of sensitive data
# Production consideration: Most commonly used secret type

data:
  # data: Contains the actual secret data in base64 encoded format
  # Each key becomes an environment variable or file name when consumed
  # Each value is base64 encoded sensitive data
  
  # =============================================================================
  # DATABASE CREDENTIALS
  # =============================================================================
  POSTGRES_USER: cG9zdGdyZXM=
  # POSTGRES_USER: Database username (base64 encoded)
  # Value: cG9zdGdyZXM= - Base64 encoded "postgres"
  # Purpose: Database username for authentication
  # Impact: Applications authenticate to database with this username
  # Security benefit: Username is encrypted and not stored in plain text
  # Production consideration: Uses standard PostgreSQL admin username
  
  POSTGRES_PASSWORD: U3VwZXJTZWN1cmVQYXNzd29yZDEyMw==
  # POSTGRES_PASSWORD: Database password (base64 encoded)
  # Value: U3VwZXJTZWN1cmVQYXNzd29yZDEyMw== - Base64 encoded "SuperSecurePassword123"
  # Purpose: Database password for authentication
  # Impact: Applications authenticate to database with this password
  # Security benefit: Password is encrypted and not stored in plain text
  # Production consideration: Strong password with mixed case, numbers, and special characters
  
  POSTGRES_DB: ZWNvbW1lcmNlX3Byb2R1Y3Rpb24=
  # POSTGRES_DB: Database name (base64 encoded)
  # Value: ZWNvbW1lcmNlX3Byb2R1Y3Rpb24= - Base64 encoded "ecommerce_production"
  # Purpose: Database name for connection
  # Impact: Applications connect to this specific database
  # Security benefit: Database name is encrypted and not stored in plain text
  # Production consideration: Environment-specific database naming
  
  # =============================================================================
  # DATABASE CONNECTION STRING
  # =============================================================================
  DATABASE_URL: cG9zdGdyZXM6Ly9wb3N0Z3JlczpTdXBlclNlY3VyZVBhc3N3b3JkMTIzQHBvc3RncmVzcWwtc2VydmljZTo1NDMyL2Vjb21tZXJjZV9wcm9kdWN0aW9uP3NzbG1vZGU9cmVxdWlyZQ==
  # DATABASE_URL: Complete database connection string (base64 encoded)
  # Value: Base64 encoded connection string with credentials
  # Purpose: Provides complete database connection information
  # Impact: Applications can connect using single connection string
  # Security benefit: Connection string is encrypted and not stored in plain text
  # Production consideration: Enables easy database connection configuration
  
  # =============================================================================
  # DATABASE SSL CONFIGURATION
  # =============================================================================
  POSTGRES_SSL_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0t
  # POSTGRES_SSL_CERT: SSL certificate for database connection (base64 encoded)
  # Value: Base64 encoded SSL certificate
  # Purpose: Enables SSL/TLS encryption for database connections
  # Impact: Database connections are encrypted using this certificate
  # Security benefit: Ensures encrypted database communication
  # Production consideration: Enables secure database connections
  
  POSTGRES_SSL_KEY: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0t
  # POSTGRES_SSL_KEY: SSL private key for database connection (base64 encoded)
  # Value: Base64 encoded SSL private key
  # Purpose: Enables SSL/TLS encryption for database connections
  # Impact: Database connections are encrypted using this private key
  # Security benefit: Ensures encrypted database communication
  # Production consideration: Enables secure database connections
  
  POSTGRES_SSL_CA: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0t
  # POSTGRES_SSL_CA: SSL certificate authority for database connection (base64 encoded)
  # Value: Base64 encoded SSL certificate authority
  # Purpose: Validates SSL certificates for database connections
  # Impact: Database SSL certificates are validated using this CA
  # Security benefit: Ensures certificate validation and prevents man-in-the-middle attacks
  # Production consideration: Enables secure database connections with certificate validation

---
# =============================================================================
# REDIS SECRETS
# =============================================================================
# Purpose: Stores Redis cache credentials and sensitive configuration
# Why needed: Secures cache access credentials and prevents credential exposure
# Kubernetes concept: Secrets provide encrypted storage for sensitive data

apiVersion: v1
# API Version: v1 is the stable version for Secret resources

kind: Secret
# Resource Type: Secret stores sensitive data in encrypted format

metadata:
  # Metadata section contains identifying information about the resource
  name: redis-secrets
  # Name: Unique identifier for this Secret within the namespace
  # This name will be used to reference the Secret in pod specifications
  
  namespace: ecommerce
  # Namespace: Specifies which namespace this Secret belongs to
  # Must match the namespace created in the namespace.yaml file
  
  labels:
    # Labels: Key-value pairs for organizing and selecting resources
    app: ecommerce
    # app: ecommerce - Identifies this Secret as belonging to the e-commerce app
    component: cache
    # component: cache - Identifies this as a cache component
    tier: data
    # tier: data - Identifies this as data tier
    environment: production
    # environment: production - Indicates this is for production environment
    managed-by: kubernetes
    # managed-by: kubernetes - Indicates this resource is managed by Kubernetes
  
  annotations:
    # Annotations: Additional metadata that doesn't affect resource behavior
    description: "Redis cache credentials for e-commerce Core Workloads Deployment"
    # description: Human-readable description of the Secret purpose
    # Used for documentation and operational understanding
    
    contact: "platform-engineering@company.com"
    # contact: Email address for the team responsible for this Secret
    # Used for incident response and maintenance coordination
    
    last-updated: "2024-12-01T00:00:00Z"
    # last-updated: Timestamp of last secret update
    # Used for change tracking and audit trails
    
    version: "1.0.0"
    # version: Version of the secret configuration
    # Used for secret versioning and rollback
    
    rotation-policy: "monthly"
    # rotation-policy: Secret rotation frequency
    # Value: monthly - Rotate secrets monthly
    # Purpose: Ensures regular secret rotation for security
    # Impact: Secrets are rotated every month
    # Security benefit: Reduces risk of compromised credentials

type: Opaque
# type: Opaque - Generic secret type
# Value: Opaque - Standard secret type for arbitrary data
# Purpose: Indicates this is a generic secret for arbitrary data
# Impact: Secret can contain any type of sensitive data
# Production consideration: Most commonly used secret type

data:
  # data: Contains the actual secret data in base64 encoded format
  # Each key becomes an environment variable or file name when consumed
  # Each value is base64 encoded sensitive data
  
  # =============================================================================
  # REDIS CREDENTIALS
  # =============================================================================
  REDIS_PASSWORD: UmVkaXNTZWN1cmVQYXNzd29yZDEyMw==
  # REDIS_PASSWORD: Redis password (base64 encoded)
  # Value: UmVkaXNTZWN1cmVQYXNzd29yZDEyMw== - Base64 encoded "RedisSecurePassword123"
  # Purpose: Redis password for authentication
  # Impact: Applications authenticate to Redis with this password
  # Security benefit: Password is encrypted and not stored in plain text
  # Production consideration: Strong password for Redis authentication
  
  # =============================================================================
  # REDIS CONNECTION STRING
  # =============================================================================
  REDIS_URL: cmVkaXM6Ly86UmVkaXNTZWN1cmVQYXNzd29yZDEyM0ByZWRpcy1zZXJ2aWNlOjYzNzkvMA==
  # REDIS_URL: Complete Redis connection string (base64 encoded)
  # Value: Base64 encoded connection string with credentials
  # Purpose: Provides complete Redis connection information
  # Impact: Applications can connect using single connection string
  # Security benefit: Connection string is encrypted and not stored in plain text
  # Production consideration: Enables easy Redis connection configuration
  
  # =============================================================================
  # REDIS SSL CONFIGURATION
  # =============================================================================
  REDIS_SSL_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0t
  # REDIS_SSL_CERT: SSL certificate for Redis connection (base64 encoded)
  # Value: Base64 encoded SSL certificate
  # Purpose: Enables SSL/TLS encryption for Redis connections
  # Impact: Redis connections are encrypted using this certificate
  # Security benefit: Ensures encrypted Redis communication
  # Production consideration: Enables secure Redis connections
  
  REDIS_SSL_KEY: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0t
  # REDIS_SSL_KEY: SSL private key for Redis connection (base64 encoded)
  # Value: Base64 encoded SSL private key
  # Purpose: Enables SSL/TLS encryption for Redis connections
  # Impact: Redis connections are encrypted using this private key
  # Security benefit: Ensures encrypted Redis communication
  # Production consideration: Enables secure Redis connections

---
# =============================================================================
# RABBITMQ SECRETS
# =============================================================================
# Purpose: Stores RabbitMQ message queue credentials and sensitive configuration
# Why needed: Secures message queue access credentials and prevents credential exposure
# Kubernetes concept: Secrets provide encrypted storage for sensitive data

apiVersion: v1
# API Version: v1 is the stable version for Secret resources

kind: Secret
# Resource Type: Secret stores sensitive data in encrypted format

metadata:
  # Metadata section contains identifying information about the resource
  name: rabbitmq-secrets
  # Name: Unique identifier for this Secret within the namespace
  # This name will be used to reference the Secret in pod specifications
  
  namespace: ecommerce
  # Namespace: Specifies which namespace this Secret belongs to
  # Must match the namespace created in the namespace.yaml file
  
  labels:
    # Labels: Key-value pairs for organizing and selecting resources
    app: ecommerce
    # app: ecommerce - Identifies this Secret as belonging to the e-commerce app
    component: message-queue
    # component: message-queue - Identifies this as a message queue component
    tier: data
    # tier: data - Identifies this as data tier
    environment: production
    # environment: production - Indicates this is for production environment
    managed-by: kubernetes
    # managed-by: kubernetes - Indicates this resource is managed by Kubernetes
  
  annotations:
    # Annotations: Additional metadata that doesn't affect resource behavior
    description: "RabbitMQ message queue credentials for e-commerce Core Workloads Deployment"
    # description: Human-readable description of the Secret purpose
    # Used for documentation and operational understanding
    
    contact: "platform-engineering@company.com"
    # contact: Email address for the team responsible for this Secret
    # Used for incident response and maintenance coordination
    
    last-updated: "2024-12-01T00:00:00Z"
    # last-updated: Timestamp of last secret update
    # Used for change tracking and audit trails
    
    version: "1.0.0"
    # version: Version of the secret configuration
    # Used for secret versioning and rollback
    
    rotation-policy: "monthly"
    # rotation-policy: Secret rotation frequency
    # Value: monthly - Rotate secrets monthly
    # Purpose: Ensures regular secret rotation for security
    # Impact: Secrets are rotated every month
    # Security benefit: Reduces risk of compromised credentials

type: Opaque
# type: Opaque - Generic secret type
# Value: Opaque - Standard secret type for arbitrary data
# Purpose: Indicates this is a generic secret for arbitrary data
# Impact: Secret can contain any type of sensitive data
# Production consideration: Most commonly used secret type

data:
  # data: Contains the actual secret data in base64 encoded format
  # Each key becomes an environment variable or file name when consumed
  # Each value is base64 encoded sensitive data
  
  # =============================================================================
  # RABBITMQ CREDENTIALS
  # =============================================================================
  RABBITMQ_USER: cmFiYml0bXE=
  # RABBITMQ_USER: RabbitMQ username (base64 encoded)
  # Value: cmFiYml0bXE= - Base64 encoded "rabbitmq"
  # Purpose: RabbitMQ username for authentication
  # Impact: Applications authenticate to RabbitMQ with this username
  # Security benefit: Username is encrypted and not stored in plain text
  # Production consideration: Uses standard RabbitMQ username
  
  RABBITMQ_PASSWORD: UmFiYml0TVFTZWN1cmVQYXNzd29yZDEyMw==
  # RABBITMQ_PASSWORD: RabbitMQ password (base64 encoded)
  # Value: UmFiYml0TVFTZWN1cmVQYXNzd29yZDEyMw== - Base64 encoded "RabbitMQSecurePassword123"
  # Purpose: RabbitMQ password for authentication
  # Impact: Applications authenticate to RabbitMQ with this password
  # Security benefit: Password is encrypted and not stored in plain text
  # Production consideration: Strong password for RabbitMQ authentication
  
  RABBITMQ_VHOST: L2Vjb21tZXJjZQ==
  # RABBITMQ_VHOST: RabbitMQ virtual host (base64 encoded)
  # Value: L2Vjb21tZXJjZQ== - Base64 encoded "/ecommerce"
  # Purpose: RabbitMQ virtual host for message isolation
  # Impact: Applications use this virtual host for message routing
  # Security benefit: Virtual host is encrypted and not stored in plain text
  # Production consideration: Environment-specific virtual host naming
  
  # =============================================================================
  # RABBITMQ CONNECTION STRING
  # =============================================================================
  RABBITMQ_URL: YW1xcDovL3JhYmJpdG1xOlJhYmJpdE1RU2VjdXJlUGFzc3dvcmQxMjNAcmFiYml0bXEtc2VydmljZTo1NjcyL2Vjb21tZXJjZQ==
  # RABBITMQ_URL: Complete RabbitMQ connection string (base64 encoded)
  # Value: Base64 encoded connection string with credentials
  # Purpose: Provides complete RabbitMQ connection information
  # Impact: Applications can connect using single connection string
  # Security benefit: Connection string is encrypted and not stored in plain text
  # Production consideration: Enables easy RabbitMQ connection configuration

---
# =============================================================================
# APPLICATION SECRETS
# =============================================================================
# Purpose: Stores application-specific secrets such as API keys, JWT tokens,
# and encryption keys that are used by the application
# Why needed: Secures application secrets and prevents credential exposure
# Kubernetes concept: Secrets provide encrypted storage for sensitive data

apiVersion: v1
# API Version: v1 is the stable version for Secret resources

kind: Secret
# Resource Type: Secret stores sensitive data in encrypted format

metadata:
  # Metadata section contains identifying information about the resource
  name: ecommerce-app-secrets
  # Name: Unique identifier for this Secret within the namespace
  # This name will be used to reference the Secret in pod specifications
  
  namespace: ecommerce
  # Namespace: Specifies which namespace this Secret belongs to
  # Must match the namespace created in the namespace.yaml file
  
  labels:
    # Labels: Key-value pairs for organizing and selecting resources
    app: ecommerce
    # app: ecommerce - Identifies this Secret as belonging to the e-commerce app
    component: application
    # component: application - Identifies this as an application component
    tier: application
    # tier: application - Identifies this as application tier
    environment: production
    # environment: production - Indicates this is for production environment
    managed-by: kubernetes
    # managed-by: kubernetes - Indicates this resource is managed by Kubernetes
  
  annotations:
    # Annotations: Additional metadata that doesn't affect resource behavior
    description: "Application secrets for e-commerce Core Workloads Deployment"
    # description: Human-readable description of the Secret purpose
    # Used for documentation and operational understanding
    
    contact: "platform-engineering@company.com"
    # contact: Email address for the team responsible for this Secret
    # Used for incident response and maintenance coordination
    
    last-updated: "2024-12-01T00:00:00Z"
    # last-updated: Timestamp of last secret update
    # Used for change tracking and audit trails
    
    version: "1.0.0"
    # version: Version of the secret configuration
    # Used for secret versioning and rollback
    
    rotation-policy: "monthly"
    # rotation-policy: Secret rotation frequency
    # Value: monthly - Rotate secrets monthly
    # Purpose: Ensures regular secret rotation for security
    # Impact: Secrets are rotated every month
    # Security benefit: Reduces risk of compromised credentials

type: Opaque
# type: Opaque - Generic secret type
# Value: Opaque - Standard secret type for arbitrary data
# Purpose: Indicates this is a generic secret for arbitrary data
# Impact: Secret can contain any type of sensitive data
# Production consideration: Most commonly used secret type

data:
  # data: Contains the actual secret data in base64 encoded format
  # Each key becomes an environment variable or file name when consumed
  # Each value is base64 encoded sensitive data
  
  # =============================================================================
  # JWT CONFIGURATION
  # =============================================================================
  JWT_SECRET: U3VwZXJTZWN1cmVKV1RTZWNyZXRLZXkxMjM0NTY3ODkw
  # JWT_SECRET: JWT signing secret (base64 encoded)
  # Value: U3VwZXJTZWN1cmVKV1RTZWNyZXRLZXkxMjM0NTY3ODkw - Base64 encoded "SuperSecureJWTSecretKey1234567890"
  # Purpose: JWT token signing and verification
  # Impact: Applications use this secret to sign and verify JWT tokens
  # Security benefit: Secret is encrypted and not stored in plain text
  # Production consideration: Strong secret for JWT token security
  
  JWT_EXPIRATION: MzYwMA==
  # JWT_EXPIRATION: JWT token expiration time in seconds (base64 encoded)
  # Value: MzYwMA== - Base64 encoded "3600" (1 hour)
  # Purpose: Controls JWT token lifetime
  # Impact: JWT tokens expire after 1 hour
  # Security benefit: Limits token lifetime for security
  # Production consideration: Balances security with user experience
  
  # =============================================================================
  # API KEYS
  # =============================================================================
  PAYMENT_API_KEY: UGF5bWVudEFQSUtleTEyMzQ1Njc4OTA=
  # PAYMENT_API_KEY: Payment gateway API key (base64 encoded)
  # Value: UGF5bWVudEFQSUtleTEyMzQ1Njc4OTA= - Base64 encoded "PaymentAPIKey1234567890"
  # Purpose: Payment gateway authentication
  # Impact: Applications authenticate to payment gateway with this key
  # Security benefit: API key is encrypted and not stored in plain text
  # Production consideration: Secure payment processing
  
  EMAIL_API_KEY: RW1haWxBUElLZXkxMjM0NTY3ODkw
  # EMAIL_API_KEY: Email service API key (base64 encoded)
  # Value: RW1haWxBUElLZXkxMjM0NTY3ODkw - Base64 encoded "EmailAPIKey1234567890"
  # Purpose: Email service authentication
  # Impact: Applications authenticate to email service with this key
  # Security benefit: API key is encrypted and not stored in plain text
  # Production consideration: Secure email delivery
  
  # =============================================================================
  # ENCRYPTION KEYS
  # =============================================================================
  ENCRYPTION_KEY: U3VwZXJTZWN1cmVFbmNyeXB0aW9uS2V5MTIzNDU2Nzg5MA==
  # ENCRYPTION_KEY: Data encryption key (base64 encoded)
  # Value: U3VwZXJTZWN1cmVFbmNyeXB0aW9uS2V5MTIzNDU2Nzg5MA== - Base64 encoded "SuperSecureEncryptionKey1234567890"
  # Purpose: Encrypts sensitive data at rest
  # Impact: Applications use this key to encrypt sensitive data
  # Security benefit: Encryption key is encrypted and not stored in plain text
  # Production consideration: Enables data encryption for sensitive information
  
  # =============================================================================
  # EXTERNAL SERVICE CREDENTIALS
  # =============================================================================
  STRIPE_SECRET_KEY: c2tfdGVzdF9zdHJpcGVfc2VjcmV0X2tleV8xMjM0NTY3ODkw
  # STRIPE_SECRET_KEY: Stripe payment processing secret key (base64 encoded)
  # Value: c2tfdGVzdF9zdHJpcGVfc2VjcmV0X2tleV8xMjM0NTY3ODkw - Base64 encoded "sk_test_stripe_secret_key_1234567890"
  # Purpose: Stripe payment processing authentication
  # Impact: Applications process payments through Stripe using this key
  # Security benefit: Secret key is encrypted and not stored in plain text
  # Production consideration: Secure payment processing with Stripe
  
  SENDGRID_API_KEY: U0cuU2VuZGdyaWRBUElrZXkxMjM0NTY3ODkw
  # SENDGRID_API_KEY: SendGrid email service API key (base64 encoded)
  # Value: U0cuU2VuZGdyaWRBUElrZXkxMjM0NTY3ODkw - Base64 encoded "SG.SendgridAPIkey1234567890"
  # Purpose: SendGrid email service authentication
  # Impact: Applications send emails through SendGrid using this key
  # Security benefit: API key is encrypted and not stored in plain text
  # Production consideration: Secure email delivery with SendGrid

---
# =============================================================================
# TLS SECRETS
# =============================================================================
# Purpose: Stores TLS certificates and private keys for secure communication
# Why needed: Enables HTTPS/TLS encryption for secure communication
# Kubernetes concept: Secrets can store TLS certificates for ingress and services

apiVersion: v1
# API Version: v1 is the stable version for Secret resources

kind: Secret
# Resource Type: Secret stores sensitive data in encrypted format

metadata:
  # Metadata section contains identifying information about the resource
  name: ecommerce-tls-secrets
  # Name: Unique identifier for this Secret within the namespace
  # This name will be used to reference the Secret in pod specifications
  
  namespace: ecommerce
  # Namespace: Specifies which namespace this Secret belongs to
  # Must match the namespace created in the namespace.yaml file
  
  labels:
    # Labels: Key-value pairs for organizing and selecting resources
    app: ecommerce
    # app: ecommerce - Identifies this Secret as belonging to the e-commerce app
    component: tls
    # component: tls - Identifies this as a TLS component
    tier: infrastructure
    # tier: infrastructure - Identifies this as infrastructure tier
    environment: production
    # environment: production - Indicates this is for production environment
    managed-by: kubernetes
    # managed-by: kubernetes - Indicates this resource is managed by Kubernetes
  
  annotations:
    # Annotations: Additional metadata that doesn't affect resource behavior
    description: "TLS certificates for e-commerce Core Workloads Deployment"
    # description: Human-readable description of the Secret purpose
    # Used for documentation and operational understanding
    
    contact: "platform-engineering@company.com"
    # contact: Email address for the team responsible for this Secret
    # Used for incident response and maintenance coordination
    
    last-updated: "2024-12-01T00:00:00Z"
    # last-updated: Timestamp of last secret update
    # Used for change tracking and audit trails
    
    version: "1.0.0"
    # version: Version of the secret configuration
    # Used for secret versioning and rollback
    
    rotation-policy: "quarterly"
    # rotation-policy: Secret rotation frequency
    # Value: quarterly - Rotate secrets quarterly
    # Purpose: Ensures regular certificate rotation for security
    # Impact: Certificates are rotated every quarter
    # Security benefit: Reduces risk of compromised certificates

type: kubernetes.io/tls
# type: kubernetes.io/tls - TLS secret type
# Value: kubernetes.io/tls - Standard TLS secret type
# Purpose: Indicates this is a TLS secret for certificates
# Impact: Secret is recognized as TLS certificate by Kubernetes
# Production consideration: Enables automatic TLS certificate management

data:
  # data: Contains the actual TLS certificate data in base64 encoded format
  # tls.crt: TLS certificate
  # tls.key: TLS private key
  
  # =============================================================================
  # TLS CERTIFICATE
  # =============================================================================
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0t
  # tls.crt: TLS certificate (base64 encoded)
  # Value: Base64 encoded TLS certificate
  # Purpose: Enables HTTPS/TLS encryption for secure communication
  # Impact: Applications can establish secure TLS connections
  # Security benefit: Ensures encrypted communication
  # Production consideration: Enables secure web communication
  
  # =============================================================================
  # TLS PRIVATE KEY
  # =============================================================================
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0t
  # tls.key: TLS private key (base64 encoded)
  # Value: Base64 encoded TLS private key
  # Purpose: Enables HTTPS/TLS encryption for secure communication
  # Impact: Applications can establish secure TLS connections
  # Security benefit: Ensures encrypted communication
  # Production consideration: Enables secure web communication
