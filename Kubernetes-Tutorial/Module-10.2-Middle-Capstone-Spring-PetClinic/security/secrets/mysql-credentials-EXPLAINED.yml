# =============================================================================
# MYSQL CREDENTIALS SECRET - COMPREHENSIVE SECURITY DOCUMENTATION
# =============================================================================
# This file defines the Kubernetes Secret containing MySQL database credentials
# for the PetClinic application. Secrets provide secure storage and management
# of sensitive data such as passwords, tokens, and keys, ensuring credentials
# are not exposed in plain text within application configurations.
#
# SECURITY PRINCIPLE: Secrets implement the principle of least privilege and
# defense in depth by centralizing credential management and providing secure
# distribution to authorized applications and services.
#
# OPERATIONAL CRITICALITY: This Secret is essential for database connectivity
# across all microservices, making it a critical security component that
# requires careful management and protection.
# =============================================================================

# -----------------------------------------------------------------------------
# KUBERNETES SECRET - SECURE CREDENTIAL STORAGE
# -----------------------------------------------------------------------------
# API version for Secret resources
apiVersion: v1
# SECRET_API: v1 is the stable API for Kubernetes Secrets

# Resource type: Secret for sensitive data storage
kind: Secret
# SECRET_TYPE: Kubernetes Secret provides secure storage for sensitive information
# ENCRYPTION: Secrets are encrypted at rest in etcd (when configured)
# ACCESS_CONTROL: Secrets are subject to RBAC and namespace isolation

# Metadata section for Secret identification
metadata:
  # Secret name for reference by applications
  name: mysql-credentials
  # NAMING_CONVENTION: Descriptive name indicating purpose and scope
  # REFERENCE_PATTERN: Applications reference this secret by name
  
  # Namespace for secret isolation and access control
  namespace: petclinic
  # NAMESPACE_ISOLATION: Secrets are namespace-scoped for security boundaries
  # ACCESS_SCOPE: Only applications in this namespace can access this secret
  
  # Labels for secret classification and management
  labels:
    # Application identifier for secret grouping
    app: mysql
    # DATABASE_CREDENTIALS: Identifies this as database-related secret
    
    # Component classification for architectural organization
    component: database
    # SECURITY_LAYER: Database credential management component

# Secret specification
# Secret type classification
type: Opaque
# OPAQUE_TYPE: Generic secret type for arbitrary user-defined data
# FLEXIBILITY: Opaque secrets can contain any type of sensitive data
# ENCODING: Data values are base64 encoded for safe storage

# Secret data containing base64-encoded credentials
data:
  # Base64 encoded values
  # username: petclinic (cGV0Y2xpbmlj)
  # password: petclinic123 (cGV0Y2xpbmljMTIz)
  # root-password: rootpassword123 (cm9vdHBhc3N3b3JkMTIz)
  # DOCUMENTATION: Comments show decoded values for operational reference
  # SECURITY_NOTE: In production, these comments should be removed
  
  # Application database username
  username: cGV0Y2xpbmlj
  # BASE64_ENCODING: "petclinic" encoded as base64
  # APPLICATION_USER: Dedicated database user for application access
  # PRINCIPLE_OF_LEAST_PRIVILEGE: Non-root user with limited permissions
  
  # Application database password
  password: cGV0Y2xpbmljMTIz
  # BASE64_ENCODING: "petclinic123" encoded as base64
  # PASSWORD_POLICY: Should follow organizational password complexity requirements
  # ROTATION_REQUIRED: Passwords should be rotated regularly for security
  
  # Database root password for administrative operations
  root-password: cm9vdHBhc3N3b3JkMTIz
  # BASE64_ENCODING: "rootpassword123" encoded as base64
  # ADMINISTRATIVE_ACCESS: Root password for database administration
  # RESTRICTED_USE: Should only be used for administrative tasks

# =============================================================================
# KUBERNETES SECRET SECURITY ANALYSIS
# =============================================================================
#
# SECRET MANAGEMENT STRENGTHS:
# ✅ CENTRALIZED STORAGE: Single source of truth for database credentials
# ✅ NAMESPACE ISOLATION: Secrets are isolated within namespace boundaries
# ✅ BASE64 ENCODING: Data is encoded for safe storage and transmission
# ✅ RBAC INTEGRATION: Access controlled through Kubernetes RBAC
# ✅ VOLUME MOUNTING: Secrets can be mounted as files or environment variables
# ✅ AUTOMATIC UPDATES: Secret changes can trigger application updates
#
# CURRENT SECURITY GAPS:
# ❌ WEAK PASSWORDS: Simple passwords that don't meet enterprise standards
# ❌ STATIC CREDENTIALS: No password rotation mechanism implemented
# ❌ PLAIN TEXT COMMENTS: Decoded values visible in comments
# ❌ NO ENCRYPTION AT REST: Requires etcd encryption configuration
# ❌ NO EXTERNAL SECRET MANAGEMENT: Not integrated with enterprise secret stores
#
# PRODUCTION SECURITY ENHANCEMENTS NEEDED:
#
# 1. STRONG PASSWORD POLICY:
#    # Generate cryptographically secure passwords
#    apiVersion: v1
#    kind: Secret
#    metadata:
#      name: mysql-credentials
#      namespace: petclinic
#    type: Opaque
#    data:
#      # Strong passwords with complexity requirements
#      username: cGV0Y2xpbmljX3VzZXI=  # petclinic_user
#      password: UEAkJHcwcmQhMjAyNCNTZWN1cmU=  # P@$$w0rd!2024#Secure
#      root-password: Um9vdCNQQCQkdzByZCEyMDI0I1N1cGVyU2VjdXJl  # Root#P@$$w0rd!2024#SuperSecure
#
# 2. EXTERNAL SECRET MANAGEMENT INTEGRATION:
#    # HashiCorp Vault integration
#    apiVersion: external-secrets.io/v1beta1
#    kind: SecretStore
#    metadata:
#      name: vault-backend
#      namespace: petclinic
#    spec:
#      provider:
#        vault:
#          server: "https://vault.company.com"
#          path: "secret"
#          version: "v2"
#          auth:
#            kubernetes:
#              mountPath: "kubernetes"
#              role: "petclinic-role"
#
# 3. AUTOMATIC SECRET ROTATION:
#    # External Secrets Operator with rotation
#    apiVersion: external-secrets.io/v1beta1
#    kind: ExternalSecret
#    metadata:
#      name: mysql-credentials
#      namespace: petclinic
#    spec:
#      refreshInterval: 24h  # Daily rotation
#      secretStoreRef:
#        name: vault-backend
#        kind: SecretStore
#      target:
#        name: mysql-credentials
#        creationPolicy: Owner
#      data:
#      - secretKey: username
#        remoteRef:
#          key: database/mysql
#          property: username
#      - secretKey: password
#        remoteRef:
#          key: database/mysql
#          property: password
#
# 4. SECRET ENCRYPTION AT REST:
#    # Kubernetes encryption configuration
#    apiVersion: apiserver.config.k8s.io/v1
#    kind: EncryptionConfiguration
#    resources:
#    - resources:
#      - secrets
#      providers:
#      - aescbc:
#          keys:
#          - name: key1
#            secret: <base64-encoded-32-byte-key>
#      - identity: {}
#
# SECRET USAGE PATTERNS:
#
# 1. ENVIRONMENT VARIABLE INJECTION:
#    # In deployment manifests
#    env:
#    - name: SPRING_DATASOURCE_USERNAME
#      valueFrom:
#        secretKeyRef:
#          name: mysql-credentials
#          key: username
#    - name: SPRING_DATASOURCE_PASSWORD
#      valueFrom:
#        secretKeyRef:
#          name: mysql-credentials
#          key: password
#
# 2. VOLUME MOUNTING:
#    # Mount secret as files
#    volumeMounts:
#    - name: mysql-credentials
#      mountPath: "/etc/mysql-credentials"
#      readOnly: true
#    volumes:
#    - name: mysql-credentials
#      secret:
#        secretName: mysql-credentials
#        defaultMode: 0400  # Read-only for owner
#
# 3. INIT CONTAINER USAGE:
#    # Use in init containers for database setup
#    initContainers:
#    - name: db-migration
#      image: migrate/migrate
#      env:
#      - name: DATABASE_URL
#        value: "mysql://$(DB_USER):$(DB_PASS)@mysql:3306/petclinic"
#      - name: DB_USER
#        valueFrom:
#          secretKeyRef:
#            name: mysql-credentials
#            key: username
#      - name: DB_PASS
#        valueFrom:
#          secretKeyRef:
#            name: mysql-credentials
#            key: password
#
# SECURITY BEST PRACTICES:
#
# 1. ACCESS CONTROL:
#    # RBAC for secret access
#    apiVersion: rbac.authorization.k8s.io/v1
#    kind: Role
#    metadata:
#      namespace: petclinic
#      name: secret-reader
#    rules:
#    - apiGroups: [""]
#      resources: ["secrets"]
#      resourceNames: ["mysql-credentials"]
#      verbs: ["get", "list"]
#
# 2. AUDIT LOGGING:
#    # Enable audit logging for secret access
#    # Monitor secret access patterns
#    # Alert on unauthorized secret access attempts
#    # Regular access review and compliance reporting
#
# 3. SECRET ROTATION PROCEDURES:
#    # Automated password rotation schedule
#    # Coordinated updates across all consuming applications
#    # Rollback procedures for failed rotations
#    # Testing rotation procedures in non-production environments
#
# OPERATIONAL PROCEDURES:
#
# 1. SECRET CREATION:
#    # Create secret from command line
#    kubectl create secret generic mysql-credentials \
#      --from-literal=username=petclinic_user \
#      --from-literal=password='P@$$w0rd!2024#Secure' \
#      --from-literal=root-password='Root#P@$$w0rd!2024#SuperSecure' \
#      --namespace=petclinic
#
# 2. SECRET UPDATES:
#    # Update existing secret
#    kubectl patch secret mysql-credentials \
#      --namespace=petclinic \
#      --type='json' \
#      -p='[{"op": "replace", "path": "/data/password", "value": "bmV3UGFzc3dvcmQ="}]'
#
# 3. SECRET VERIFICATION:
#    # Verify secret contents (be careful with output)
#    kubectl get secret mysql-credentials -n petclinic -o yaml
#    
#    # Decode secret values (use with caution)
#    kubectl get secret mysql-credentials -n petclinic -o jsonpath='{.data.username}' | base64 -d
#
# COMPLIANCE AND GOVERNANCE:
#
# 1. REGULATORY COMPLIANCE:
#    # SOC 2 Type II: Secure credential management
#    # PCI DSS: Secure storage of database credentials
#    # GDPR: Protection of credentials accessing personal data
#    # HIPAA: Secure access to medical record databases
#
# 2. ORGANIZATIONAL POLICIES:
#    # Password complexity requirements
#    # Credential rotation schedules
#    # Access review and approval processes
#    # Incident response for credential compromise
#
# 3. AUDIT REQUIREMENTS:
#    # Secret access logging and monitoring
#    # Regular credential strength assessments
#    # Compliance reporting and documentation
#    # Penetration testing of credential security
#
# DISASTER RECOVERY:
#
# 1. SECRET BACKUP:
#    # Backup secrets to secure, encrypted storage
#    # Cross-region secret replication
#    # Recovery procedures for secret loss
#    # Testing secret recovery processes
#
# 2. CREDENTIAL RECOVERY:
#    # Emergency credential reset procedures
#    # Backup authentication methods
#    # Service account recovery processes
#    # Communication plans for credential incidents
#
# MONITORING AND ALERTING:
# - Secret access pattern monitoring
# - Failed authentication attempt alerting
# - Credential age and rotation tracking
# - Unauthorized secret modification detection
# - Integration with SIEM systems for security monitoring
#
# =============================================================================
