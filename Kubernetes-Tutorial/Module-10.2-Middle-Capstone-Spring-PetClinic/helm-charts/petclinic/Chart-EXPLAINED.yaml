# =============================================================================
# PETCLINIC HELM CHART METADATA - COMPREHENSIVE PACKAGING DOCUMENTATION
# =============================================================================
# This Chart.yaml file defines the metadata and configuration for the PetClinic
# Helm chart package. Helm charts provide templated, versioned, and reusable
# Kubernetes application deployments with dependency management and lifecycle control.
#
# PACKAGING PHILOSOPHY: Helm charts enable "application as code" by packaging
# complex Kubernetes applications into manageable, versioned, and distributable units.
#
# OPERATIONAL IMPACT: This chart metadata directly controls deployment versioning,
# dependency resolution, and application lifecycle management across environments.
# =============================================================================

# -----------------------------------------------------------------------------
# HELM CHART API VERSION - CHART FORMAT SPECIFICATION
# -----------------------------------------------------------------------------
# API version for Helm chart format specification
# v2 is the current chart format introduced in Helm 3.0
# v2 charts support advanced features like dependencies, library charts, and JSON Schema validation
apiVersion: v2
# COMPATIBILITY: v2 charts require Helm 3.0 or later
# FEATURES: Enables dependency management, library charts, and schema validation
# MIGRATION: v1 charts (Helm 2) are deprecated and should be upgraded

# -----------------------------------------------------------------------------
# CHART IDENTIFICATION AND BASIC METADATA
# -----------------------------------------------------------------------------
# Chart name - must be lowercase and match the directory name
# Used for chart identification, installation naming, and repository indexing
name: petclinic
# NAMING CONVENTION: Simple, descriptive names improve discoverability
# REQUIREMENT: Must match the parent directory name containing this Chart.yaml
# UNIQUENESS: Chart name must be unique within a Helm repository

# Human-readable description of what this chart deploys
# Appears in chart listings, search results, and documentation
description: Spring PetClinic Microservices Platform
# DOCUMENTATION: Provides clear understanding of chart purpose
# DISCOVERABILITY: Helps users find appropriate charts in repositories
# MARKETING: First impression for potential chart users

# Chart type classification for Helm chart categorization
# "application" indicates this chart deploys a complete application
type: application
# CHART TYPES:
# - application: Deploys a complete application (default)
# - library: Provides reusable templates for other charts
# USAGE: Application charts are installed directly, library charts are dependencies

# -----------------------------------------------------------------------------
# VERSION MANAGEMENT AND RELEASE CONTROL
# -----------------------------------------------------------------------------
# Chart version using Semantic Versioning (SemVer)
# Incremented when chart templates, values, or metadata change
version: 1.0.0
# VERSIONING STRATEGY: MAJOR.MINOR.PATCH format
# MAJOR: Breaking changes to chart API or behavior
# MINOR: New features, backward-compatible changes
# PATCH: Bug fixes, documentation updates
# DEPLOYMENT CONTROL: Different chart versions can deploy different configurations

# Application version - the version of the application being deployed
# Represents the version of the PetClinic application, not the chart
appVersion: "3.2.0"
# APPLICATION TRACKING: Tracks the actual application version being deployed
# RELEASE MANAGEMENT: Enables correlation between chart releases and app versions
# COMPATIBILITY: Helps ensure chart compatibility with specific app versions
# QUOTES REQUIRED: String format prevents YAML parsing issues with version numbers

# -----------------------------------------------------------------------------
# CHART CLASSIFICATION AND DISCOVERY METADATA
# -----------------------------------------------------------------------------
# Keywords array for chart categorization and search optimization
# Used by Helm repositories and chart discovery tools
keywords:
  - spring-boot    # Framework classification
  - microservices  # Architecture pattern
  - java          # Programming language
  - veterinary    # Business domain
# SEARCH OPTIMIZATION: Improves chart discoverability in repositories
# CATEGORIZATION: Enables filtering and grouping in chart catalogs
# ECOSYSTEM INTEGRATION: Helps tools understand chart purpose and technology stack

# -----------------------------------------------------------------------------
# PROJECT LINKS AND EXTERNAL REFERENCES
# -----------------------------------------------------------------------------
# Home page URL for the project or chart
# Primary landing page for users seeking information about the application
home: https://github.com/spring-petclinic/spring-petclinic-microservices
# USER GUIDANCE: Provides primary resource for documentation and support
# PROJECT CONTEXT: Links chart to broader project ecosystem
# TRUST BUILDING: Official project links establish credibility

# Source code repositories array
# Lists all relevant source code locations for the application
sources:
  - https://github.com/spring-petclinic/spring-petclinic-microservices
# TRANSPARENCY: Provides access to source code for security and compliance
# CONTRIBUTION: Enables community contributions and issue reporting
# AUDIT TRAIL: Supports security audits and code reviews
# MULTIPLE SOURCES: Array format supports multiple repositories if needed

# -----------------------------------------------------------------------------
# MAINTAINER INFORMATION AND SUPPORT CONTACTS
# -----------------------------------------------------------------------------
# Maintainers array listing chart and application maintainers
# Provides contact information for support, issues, and contributions
maintainers:
  - # Maintainer name for identification and attribution
    name: Spring PetClinic Team
    # RESPONSIBILITY: Identifies who maintains and supports this chart
    # ACCOUNTABILITY: Provides clear ownership for chart issues
    
    # Contact email for maintainer communication
    email: petclinic@spring.io
    # SUPPORT CHANNEL: Primary contact for chart-related issues
    # COMMUNITY: Enables community engagement and contribution coordination
    # INCIDENT RESPONSE: Critical for security issues and urgent support

# =============================================================================
# HELM CHART ECOSYSTEM ANALYSIS AND PRODUCTION CONSIDERATIONS
# =============================================================================
#
# CHART METADATA ANALYSIS:
# ✅ SEMANTIC VERSIONING: Proper SemVer format for version management
# ✅ CLEAR IDENTIFICATION: Descriptive name and description
# ✅ PROPER CLASSIFICATION: Application type chart for direct deployment
# ✅ KEYWORD OPTIMIZATION: Relevant keywords for discoverability
# ✅ EXTERNAL LINKS: Proper home and source references
# ✅ MAINTAINER CONTACT: Clear ownership and support channels
#
# MISSING PRODUCTION ENHANCEMENTS:
#
# 1. ADVANCED METADATA:
#    # Enhanced Chart.yaml with additional production metadata
#    apiVersion: v2
#    name: petclinic
#    description: Spring PetClinic Microservices Platform - Production Ready
#    type: application
#    version: 1.0.0
#    appVersion: "3.2.0"
#    
#    # Additional production metadata
#    deprecated: false
#    tillerVersion: ">=2.16.0"
#    kubeVersion: ">=1.19.0"
#    
#    # Enhanced keywords
#    keywords:
#      - spring-boot
#      - microservices
#      - java
#      - veterinary
#      - kubernetes
#      - helm
#      - production-ready
#    
#    # Additional URLs
#    home: https://github.com/spring-petclinic/spring-petclinic-microservices
#    icon: https://spring.io/images/spring-logo.svg
#    
#    # Enhanced maintainer information
#    maintainers:
#      - name: Spring PetClinic Team
#        email: petclinic@spring.io
#        url: https://spring-petclinic.github.io
#    
#    # Annotations for additional metadata
#    annotations:
#      category: Application
#      licenses: Apache-2.0
#      images: |
#        - name: api-gateway
#          image: springcommunity/spring-petclinic-api-gateway:3.2.0
#        - name: customers-service
#          image: springcommunity/spring-petclinic-customers-service:3.2.0
#
# 2. DEPENDENCY MANAGEMENT:
#    # Dependencies section for external charts
#    dependencies:
#      - name: mysql
#        version: "9.4.0"
#        repository: "https://charts.bitnami.com/bitnami"
#        condition: mysql.enabled
#      - name: prometheus
#        version: "15.0.0"
#        repository: "https://prometheus-community.github.io/helm-charts"
#        condition: monitoring.prometheus.enabled
#      - name: grafana
#        version: "6.0.0"
#        repository: "https://grafana.github.io/helm-charts"
#        condition: monitoring.grafana.enabled
#
# 3. CHART VALIDATION AND TESTING:
#    # JSON Schema validation for values.yaml
#    # Create values.schema.json file for value validation
#    
#    # Chart testing configuration
#    # Create tests/ directory with test pods
#    
#    # Helm chart linting and validation
#    helm lint helm-charts/petclinic/
#    helm template petclinic helm-charts/petclinic/ --validate
#
# CHART LIFECYCLE MANAGEMENT:
#
# 1. VERSION STRATEGY:
#    - Chart version: Increment for chart changes
#    - App version: Track application releases
#    - Semantic versioning for predictable upgrades
#    - Changelog maintenance for version history
#
# 2. RELEASE PROCESS:
#    - Automated chart testing in CI/CD
#    - Chart signing for security and authenticity
#    - Repository publication and indexing
#    - Release notes and upgrade guides
#
# 3. MAINTENANCE PROCEDURES:
#    - Regular dependency updates
#    - Security vulnerability scanning
#    - Compatibility testing with new Kubernetes versions
#    - Community feedback integration
#
# REPOSITORY AND DISTRIBUTION:
#
# 1. CHART REPOSITORY SETUP:
#    # Package and publish chart
#    helm package helm-charts/petclinic/
#    helm repo index . --url https://charts.example.com
#    
#    # Repository configuration
#    helm repo add petclinic https://charts.example.com
#    helm repo update
#
# 2. CHART INSTALLATION:
#    # Install chart with default values
#    helm install petclinic petclinic/petclinic
#    
#    # Install with custom values
#    helm install petclinic petclinic/petclinic -f custom-values.yaml
#    
#    # Upgrade existing installation
#    helm upgrade petclinic petclinic/petclinic --version 1.1.0
#
# 3. CHART MANAGEMENT:
#    # List installed charts
#    helm list
#    
#    # Check chart status
#    helm status petclinic
#    
#    # Rollback to previous version
#    helm rollback petclinic 1
#
# SECURITY AND COMPLIANCE:
#
# 1. CHART SECURITY:
#    - Sign charts with GPG keys for authenticity
#    - Scan chart dependencies for vulnerabilities
#    - Validate chart templates for security best practices
#    - Implement chart provenance tracking
#
# 2. COMPLIANCE CONSIDERATIONS:
#    - Document chart licensing and dependencies
#    - Maintain security patch procedures
#    - Implement change management for chart updates
#    - Audit chart usage and deployment patterns
#
# MONITORING AND OBSERVABILITY:
# - Track chart deployment success rates
# - Monitor chart upgrade patterns and failures
# - Collect feedback on chart usability and features
# - Maintain metrics on chart adoption and usage
#
# =============================================================================
