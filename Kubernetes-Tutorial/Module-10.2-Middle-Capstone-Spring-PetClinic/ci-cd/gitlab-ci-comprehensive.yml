# üöÄ Comprehensive GitLab CI/CD Pipeline for Spring PetClinic
# ============================================================
# 
# This pipeline provides enterprise-grade DevSecOps practices including:
# - Multi-stage builds with caching
# - Comprehensive security scanning (SAST, DAST, Container, Dependency)
# - Automated testing (Unit, Integration, E2E, Performance)
# - Multi-environment deployments (Dev, Staging, Production)
# - Blue-Green and Canary deployment strategies
# - Comprehensive monitoring and alerting
# - Automated rollback capabilities
#
# Author: DevOps Team
# Version: 2.0.0 Enterprise Edition
# Last Updated: December 2024

# ============================================================================
# PIPELINE CONFIGURATION
# ============================================================================

stages:
  - validate
  - build
  - test
  - security-scan
  - package
  - deploy-dev
  - integration-test
  - deploy-staging
  - performance-test
  - security-test
  - deploy-production
  - post-deployment
  - monitoring

variables:
  # Docker Configuration
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_BUILDKIT: 1
  
  # Maven Configuration
  MAVEN_OPTS: "-Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository"
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version"
  
  # Application Configuration
  APP_NAME: "spring-petclinic"
  APP_VERSION: "${CI_COMMIT_SHORT_SHA}"
  
  # Kubernetes Configuration
  KUBE_NAMESPACE_DEV: "petclinic-dev"
  KUBE_NAMESPACE_STAGING: "petclinic-staging"
  KUBE_NAMESPACE_PROD: "petclinic-prod"
  
  # Registry Configuration
  REGISTRY_URL: "${CI_REGISTRY}"
  IMAGE_TAG: "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}"
  
  # Security Configuration
  SECURITY_SCAN_ENABLED: "true"
  SONAR_HOST_URL: "${SONAR_URL}"
  
  # Performance Configuration
  PERFORMANCE_TEST_ENABLED: "true"
  LOAD_TEST_DURATION: "5m"
  CONCURRENT_USERS: "100"

# ============================================================================
# CACHE AND ARTIFACTS CONFIGURATION
# ============================================================================

cache:
  key: "${CI_COMMIT_REF_SLUG}"
  paths:
    - .m2/repository/
    - node_modules/
    - target/
    - .sonar/cache/

# ============================================================================
# VALIDATION STAGE
# ============================================================================

validate-code-quality:
  stage: validate
  image: maven:3.8.6-openjdk-17
  script:
    - echo "üîç Validating code quality and formatting..."
    - mvn $MAVEN_CLI_OPTS validate
    - mvn $MAVEN_CLI_OPTS compile
    - echo "‚úÖ Code validation completed"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

validate-yaml-configs:
  stage: validate
  image: alpine:latest
  before_script:
    - apk add --no-cache yamllint
  script:
    - echo "üîç Validating YAML configurations..."
    - find . -name "*.yml" -o -name "*.yaml" | xargs yamllint -d relaxed
    - echo "‚úÖ YAML validation completed"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

validate-dockerfile:
  stage: validate
  image: hadolint/hadolint:latest-debian
  script:
    - echo "üîç Validating Dockerfiles..."
    - find . -name "Dockerfile*" -exec hadolint {} \;
    - echo "‚úÖ Dockerfile validation completed"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# ============================================================================
# BUILD STAGE
# ============================================================================

build-config-server:
  stage: build
  image: maven:3.8.6-openjdk-17
  script:
    - echo "üî® Building Config Server..."
    - cd spring-petclinic-config-server
    - mvn $MAVEN_CLI_OPTS clean compile
    - mvn $MAVEN_CLI_OPTS package -DskipTests
    - echo "‚úÖ Config Server build completed"
  artifacts:
    paths:
      - spring-petclinic-config-server/target/*.jar
    expire_in: 1 hour
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

build-discovery-server:
  stage: build
  image: maven:3.8.6-openjdk-17
  script:
    - echo "üî® Building Discovery Server..."
    - cd spring-petclinic-discovery-server
    - mvn $MAVEN_CLI_OPTS clean compile
    - mvn $MAVEN_CLI_OPTS package -DskipTests
    - echo "‚úÖ Discovery Server build completed"
  artifacts:
    paths:
      - spring-petclinic-discovery-server/target/*.jar
    expire_in: 1 hour
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

build-api-gateway:
  stage: build
  image: maven:3.8.6-openjdk-17
  script:
    - echo "üî® Building API Gateway..."
    - cd spring-petclinic-api-gateway
    - mvn $MAVEN_CLI_OPTS clean compile
    - mvn $MAVEN_CLI_OPTS package -DskipTests
    - echo "‚úÖ API Gateway build completed"
  artifacts:
    paths:
      - spring-petclinic-api-gateway/target/*.jar
    expire_in: 1 hour
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

build-customer-service:
  stage: build
  image: maven:3.8.6-openjdk-17
  script:
    - echo "üî® Building Customer Service..."
    - cd spring-petclinic-customers-service
    - mvn $MAVEN_CLI_OPTS clean compile
    - mvn $MAVEN_CLI_OPTS package -DskipTests
    - echo "‚úÖ Customer Service build completed"
  artifacts:
    paths:
      - spring-petclinic-customers-service/target/*.jar
    expire_in: 1 hour
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

build-vet-service:
  stage: build
  image: maven:3.8.6-openjdk-17
  script:
    - echo "üî® Building Vet Service..."
    - cd spring-petclinic-vets-service
    - mvn $MAVEN_CLI_OPTS clean compile
    - mvn $MAVEN_CLI_OPTS package -DskipTests
    - echo "‚úÖ Vet Service build completed"
  artifacts:
    paths:
      - spring-petclinic-vets-service/target/*.jar
    expire_in: 1 hour
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

build-visit-service:
  stage: build
  image: maven:3.8.6-openjdk-17
  script:
    - echo "üî® Building Visit Service..."
    - cd spring-petclinic-visits-service
    - mvn $MAVEN_CLI_OPTS clean compile
    - mvn $MAVEN_CLI_OPTS package -DskipTests
    - echo "‚úÖ Visit Service build completed"
  artifacts:
    paths:
      - spring-petclinic-visits-service/target/*.jar
    expire_in: 1 hour
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

build-admin-server:
  stage: build
  image: maven:3.8.6-openjdk-17
  script:
    - echo "üî® Building Admin Server..."
    - cd spring-petclinic-admin-server
    - mvn $MAVEN_CLI_OPTS clean compile
    - mvn $MAVEN_CLI_OPTS package -DskipTests
    - echo "‚úÖ Admin Server build completed"
  artifacts:
    paths:
      - spring-petclinic-admin-server/target/*.jar
    expire_in: 1 hour
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

# ============================================================================
# TEST STAGE
# ============================================================================

unit-tests:
  stage: test
  image: maven:3.8.6-openjdk-17
  services:
    - mysql:8.0
  variables:
    MYSQL_ROOT_PASSWORD: petclinic
    MYSQL_DATABASE: petclinic_test
    MYSQL_USER: petclinic
    MYSQL_PASSWORD: petclinic
  script:
    - echo "üß™ Running unit tests..."
    - mvn $MAVEN_CLI_OPTS test
    - echo "‚úÖ Unit tests completed"
  artifacts:
    reports:
      junit:
        - "*/target/surefire-reports/TEST-*.xml"
      coverage_report:
        coverage_format: jacoco
        path: "*/target/site/jacoco/jacoco.xml"
    paths:
      - "*/target/surefire-reports/"
      - "*/target/site/jacoco/"
    expire_in: 1 week
  coverage: '/Total.*?([0-9]{1,3})%/'
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

integration-tests:
  stage: test
  image: maven:3.8.6-openjdk-17
  services:
    - mysql:8.0
    - redis:6.2
  variables:
    MYSQL_ROOT_PASSWORD: petclinic
    MYSQL_DATABASE: petclinic_integration
    MYSQL_USER: petclinic
    MYSQL_PASSWORD: petclinic
  script:
    - echo "üîó Running integration tests..."
    - mvn $MAVEN_CLI_OPTS verify -Pintegration-tests
    - echo "‚úÖ Integration tests completed"
  artifacts:
    reports:
      junit:
        - "*/target/failsafe-reports/TEST-*.xml"
    paths:
      - "*/target/failsafe-reports/"
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

contract-tests:
  stage: test
  image: maven:3.8.6-openjdk-17
  script:
    - echo "üìã Running contract tests..."
    - mvn $MAVEN_CLI_OPTS test -Pcontract-tests
    - echo "‚úÖ Contract tests completed"
  artifacts:
    paths:
      - "*/target/pact/"
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# ============================================================================
# SECURITY SCAN STAGE
# ============================================================================

sast-scan:
  stage: security-scan
  image: maven:3.8.6-openjdk-17
  script:
    - echo "üîí Running SAST (Static Application Security Testing)..."
    - mvn $MAVEN_CLI_OPTS sonar:sonar
      -Dsonar.host.url=$SONAR_HOST_URL
      -Dsonar.login=$SONAR_TOKEN
      -Dsonar.projectKey=$CI_PROJECT_NAME
      -Dsonar.projectName="$CI_PROJECT_NAME"
      -Dsonar.projectVersion=$CI_COMMIT_SHORT_SHA
      -Dsonar.sources=src/main/java
      -Dsonar.tests=src/test/java
      -Dsonar.java.binaries=target/classes
      -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
    - echo "‚úÖ SAST scan completed"
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

dependency-scan:
  stage: security-scan
  image: maven:3.8.6-openjdk-17
  script:
    - echo "üì¶ Running dependency vulnerability scan..."
    - mvn $MAVEN_CLI_OPTS org.owasp:dependency-check-maven:check
    - echo "‚úÖ Dependency scan completed"
  artifacts:
    reports:
      dependency_scanning: "*/target/dependency-check-report.json"
    paths:
      - "*/target/dependency-check-report.html"
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

secret-detection:
  stage: security-scan
  image: alpine:latest
  before_script:
    - apk add --no-cache git
    - wget -O truffleHog https://github.com/trufflesecurity/trufflehog/releases/latest/download/trufflehog_linux_amd64
    - chmod +x truffleHog
  script:
    - echo "üîê Running secret detection scan..."
    - ./truffleHog git file://. --json > secrets-report.json || true
    - echo "‚úÖ Secret detection completed"
  artifacts:
    paths:
      - secrets-report.json
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

# ============================================================================
# PACKAGE STAGE
# ============================================================================

build-docker-images:
  stage: package
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - echo "üê≥ Building Docker images..."
    
    # Build Config Server
    - cd spring-petclinic-config-server
    - docker build -t $CI_REGISTRY_IMAGE/config-server:$CI_COMMIT_SHORT_SHA .
    - docker push $CI_REGISTRY_IMAGE/config-server:$CI_COMMIT_SHORT_SHA
    - cd ..
    
    # Build Discovery Server
    - cd spring-petclinic-discovery-server
    - docker build -t $CI_REGISTRY_IMAGE/discovery-server:$CI_COMMIT_SHORT_SHA .
    - docker push $CI_REGISTRY_IMAGE/discovery-server:$CI_COMMIT_SHORT_SHA
    - cd ..
    
    # Build API Gateway
    - cd spring-petclinic-api-gateway
    - docker build -t $CI_REGISTRY_IMAGE/api-gateway:$CI_COMMIT_SHORT_SHA .
    - docker push $CI_REGISTRY_IMAGE/api-gateway:$CI_COMMIT_SHORT_SHA
    - cd ..
    
    # Build Customer Service
    - cd spring-petclinic-customers-service
    - docker build -t $CI_REGISTRY_IMAGE/customer-service:$CI_COMMIT_SHORT_SHA .
    - docker push $CI_REGISTRY_IMAGE/customer-service:$CI_COMMIT_SHORT_SHA
    - cd ..
    
    # Build Vet Service
    - cd spring-petclinic-vets-service
    - docker build -t $CI_REGISTRY_IMAGE/vet-service:$CI_COMMIT_SHORT_SHA .
    - docker push $CI_REGISTRY_IMAGE/vet-service:$CI_COMMIT_SHORT_SHA
    - cd ..
    
    # Build Visit Service
    - cd spring-petclinic-visits-service
    - docker build -t $CI_REGISTRY_IMAGE/visit-service:$CI_COMMIT_SHORT_SHA .
    - docker push $CI_REGISTRY_IMAGE/visit-service:$CI_COMMIT_SHORT_SHA
    - cd ..
    
    # Build Admin Server
    - cd spring-petclinic-admin-server
    - docker build -t $CI_REGISTRY_IMAGE/admin-server:$CI_COMMIT_SHORT_SHA .
    - docker push $CI_REGISTRY_IMAGE/admin-server:$CI_COMMIT_SHORT_SHA
    - cd ..
    
    - echo "‚úÖ All Docker images built and pushed"
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

container-scan:
  stage: package
  image: aquasec/trivy:latest
  script:
    - echo "üîç Scanning container images for vulnerabilities..."
    - trivy image --format json --output container-scan-report.json $CI_REGISTRY_IMAGE/api-gateway:$CI_COMMIT_SHORT_SHA
    - trivy image --format json --output customer-service-scan.json $CI_REGISTRY_IMAGE/customer-service:$CI_COMMIT_SHORT_SHA
    - trivy image --format json --output vet-service-scan.json $CI_REGISTRY_IMAGE/vet-service:$CI_COMMIT_SHORT_SHA
    - trivy image --format json --output visit-service-scan.json $CI_REGISTRY_IMAGE/visit-service:$CI_COMMIT_SHORT_SHA
    - echo "‚úÖ Container scanning completed"
  artifacts:
    reports:
      container_scanning: container-scan-report.json
    paths:
      - "*-scan.json"
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# ============================================================================
# DEPLOYMENT STAGES
# ============================================================================

deploy-dev:
  stage: deploy-dev
  image: bitnami/kubectl:latest
  environment:
    name: development
    url: https://petclinic-dev.example.com
  script:
    - echo "üöÄ Deploying to Development environment..."
    - kubectl config use-context $KUBE_CONTEXT_DEV
    - kubectl create namespace $KUBE_NAMESPACE_DEV --dry-run=client -o yaml | kubectl apply -f -
    
    # Deploy databases
    - kubectl apply -f k8s-manifests/databases/ -n $KUBE_NAMESPACE_DEV
    - kubectl wait --for=condition=ready pod -l app=mysql-customer -n $KUBE_NAMESPACE_DEV --timeout=300s
    
    # Deploy infrastructure services
    - envsubst < k8s-manifests/services/config-server/deployment.yml | kubectl apply -f - -n $KUBE_NAMESPACE_DEV
    - kubectl wait --for=condition=available deployment/config-server -n $KUBE_NAMESPACE_DEV --timeout=300s
    
    - envsubst < k8s-manifests/services/discovery-server/deployment.yml | kubectl apply -f - -n $KUBE_NAMESPACE_DEV
    - kubectl wait --for=condition=available deployment/discovery-server -n $KUBE_NAMESPACE_DEV --timeout=300s
    
    # Deploy business services
    - envsubst < k8s-manifests/services/customer-service/deployment.yml | kubectl apply -f - -n $KUBE_NAMESPACE_DEV
    - envsubst < k8s-manifests/services/vet-service/deployment.yml | kubectl apply -f - -n $KUBE_NAMESPACE_DEV
    - envsubst < k8s-manifests/services/visit-service/deployment.yml | kubectl apply -f - -n $KUBE_NAMESPACE_DEV
    
    # Deploy API Gateway
    - envsubst < k8s-manifests/services/api-gateway/deployment.yml | kubectl apply -f - -n $KUBE_NAMESPACE_DEV
    - kubectl wait --for=condition=available deployment/api-gateway -n $KUBE_NAMESPACE_DEV --timeout=300s
    
    # Deploy monitoring
    - kubectl apply -f monitoring/ -n $KUBE_NAMESPACE_DEV
    
    - echo "‚úÖ Development deployment completed"
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

smoke-tests-dev:
  stage: integration-test
  image: curlimages/curl:latest
  script:
    - echo "üß™ Running smoke tests in Development..."
    - sleep 60  # Wait for services to be ready
    - curl -f http://petclinic-dev.example.com/actuator/health
    - curl -f http://petclinic-dev.example.com/api/customer/owners
    - curl -f http://petclinic-dev.example.com/api/vet/vets
    - echo "‚úÖ Development smoke tests passed"
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

deploy-staging:
  stage: deploy-staging
  image: bitnami/kubectl:latest
  environment:
    name: staging
    url: https://petclinic-staging.example.com
  script:
    - echo "üöÄ Deploying to Staging environment..."
    - kubectl config use-context $KUBE_CONTEXT_STAGING
    - kubectl create namespace $KUBE_NAMESPACE_STAGING --dry-run=client -o yaml | kubectl apply -f -
    
    # Use Helm for staging deployment
    - helm upgrade --install petclinic ./helm-charts/petclinic \
        --namespace $KUBE_NAMESPACE_STAGING \
        --set image.tag=$CI_COMMIT_SHORT_SHA \
        --set environment=staging \
        --wait --timeout=600s
    
    - echo "‚úÖ Staging deployment completed"
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  when: manual

performance-tests:
  stage: performance-test
  image: loadimpact/k6:latest
  script:
    - echo "‚ö° Running performance tests..."
    - k6 run --vus $CONCURRENT_USERS --duration $LOAD_TEST_DURATION performance/k6/load-test.js
    - echo "‚úÖ Performance tests completed"
  artifacts:
    paths:
      - performance-results.json
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $PERFORMANCE_TEST_ENABLED == "true"

dast-scan:
  stage: security-test
  image: owasp/zap2docker-stable:latest
  script:
    - echo "üîç Running DAST (Dynamic Application Security Testing)..."
    - zap-baseline.py -t https://petclinic-staging.example.com -J dast-report.json
    - echo "‚úÖ DAST scan completed"
  artifacts:
    reports:
      dast: dast-report.json
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  allow_failure: true

deploy-production:
  stage: deploy-production
  image: bitnami/kubectl:latest
  environment:
    name: production
    url: https://petclinic.example.com
  script:
    - echo "üöÄ Deploying to Production environment..."
    - kubectl config use-context $KUBE_CONTEXT_PROD
    
    # Blue-Green Deployment Strategy
    - |
      if kubectl get deployment petclinic-blue -n $KUBE_NAMESPACE_PROD >/dev/null 2>&1; then
        CURRENT_COLOR="blue"
        NEW_COLOR="green"
      else
        CURRENT_COLOR="green"
        NEW_COLOR="blue"
      fi
    
    - echo "Deploying to $NEW_COLOR environment..."
    - helm upgrade --install petclinic-$NEW_COLOR ./helm-charts/petclinic \
        --namespace $KUBE_NAMESPACE_PROD \
        --set image.tag=$CI_COMMIT_SHORT_SHA \
        --set environment=production \
        --set color=$NEW_COLOR \
        --wait --timeout=600s
    
    # Health check
    - kubectl wait --for=condition=available deployment/petclinic-$NEW_COLOR -n $KUBE_NAMESPACE_PROD --timeout=300s
    
    # Switch traffic
    - kubectl patch service petclinic -n $KUBE_NAMESPACE_PROD -p '{"spec":{"selector":{"color":"'$NEW_COLOR'"}}}'
    
    # Clean up old deployment
    - sleep 300  # Wait 5 minutes before cleanup
    - kubectl delete deployment petclinic-$CURRENT_COLOR -n $KUBE_NAMESPACE_PROD --ignore-not-found=true
    
    - echo "‚úÖ Production deployment completed"
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  when: manual

# ============================================================================
# POST-DEPLOYMENT STAGE
# ============================================================================

production-smoke-tests:
  stage: post-deployment
  image: curlimages/curl:latest
  script:
    - echo "üß™ Running production smoke tests..."
    - curl -f https://petclinic.example.com/actuator/health
    - curl -f https://petclinic.example.com/api/customer/owners
    - curl -f https://petclinic.example.com/api/vet/vets
    - echo "‚úÖ Production smoke tests passed"
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

notify-deployment:
  stage: post-deployment
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - echo "üì¢ Sending deployment notifications..."
    - |
      curl -X POST -H 'Content-type: application/json' \
        --data '{"text":"üöÄ Spring PetClinic deployed successfully to production!\nVersion: '$CI_COMMIT_SHORT_SHA'\nPipeline: '$CI_PIPELINE_URL'"}' \
        $SLACK_WEBHOOK_URL
    - echo "‚úÖ Notifications sent"
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# ============================================================================
# MONITORING STAGE
# ============================================================================

setup-monitoring:
  stage: monitoring
  image: bitnami/kubectl:latest
  script:
    - echo "üìä Setting up monitoring and alerting..."
    - kubectl apply -f monitoring/prometheus/ -n $KUBE_NAMESPACE_PROD
    - kubectl apply -f monitoring/grafana/ -n $KUBE_NAMESPACE_PROD
    - kubectl apply -f monitoring/alertmanager/ -n $KUBE_NAMESPACE_PROD
    - echo "‚úÖ Monitoring setup completed"
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  when: manual

# ============================================================================
# CLEANUP AND MAINTENANCE
# ============================================================================

cleanup-old-images:
  stage: post-deployment
  image: alpine:latest
  before_script:
    - apk add --no-cache curl jq
  script:
    - echo "üßπ Cleaning up old container images..."
    - |
      # Keep only last 10 images
      IMAGES_TO_DELETE=$(curl -s -H "PRIVATE-TOKEN: $CI_JOB_TOKEN" \
        "$CI_API_V4_URL/projects/$CI_PROJECT_ID/registry/repositories" | \
        jq -r '.[].id' | head -n -10)
      
      for image_id in $IMAGES_TO_DELETE; do
        curl -X DELETE -H "PRIVATE-TOKEN: $CI_JOB_TOKEN" \
          "$CI_API_V4_URL/projects/$CI_PROJECT_ID/registry/repositories/$image_id"
      done
    - echo "‚úÖ Image cleanup completed"
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  when: manual

# ============================================================================
# ROLLBACK JOB (Manual)
# ============================================================================

rollback-production:
  stage: deploy-production
  image: bitnami/kubectl:latest
  environment:
    name: production
    url: https://petclinic.example.com
  script:
    - echo "üîÑ Rolling back production deployment..."
    - kubectl rollout undo deployment/petclinic -n $KUBE_NAMESPACE_PROD
    - kubectl rollout status deployment/petclinic -n $KUBE_NAMESPACE_PROD
    - echo "‚úÖ Rollback completed"
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  when: manual
  allow_failure: false
