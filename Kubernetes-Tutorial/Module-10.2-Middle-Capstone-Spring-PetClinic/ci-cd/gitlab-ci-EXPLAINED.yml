# =============================================================================
# PETCLINIC GITLAB CI/CD PIPELINE - COMPREHENSIVE DEVSECOPS DOCUMENTATION
# =============================================================================
# This GitLab CI/CD pipeline implements a complete DevSecOps workflow for the
# PetClinic microservices application. It follows industry best practices for
# continuous integration, security scanning, and deployment automation.
#
# PIPELINE PHILOSOPHY: Shift-left security, fail-fast approach, and automated
# quality gates ensure that only secure, tested code reaches production.
#
# PRODUCTION IMPACT: This pipeline directly controls what code gets deployed
# to production environments, making it a critical security and quality control point.
# =============================================================================

# -----------------------------------------------------------------------------
# PIPELINE STAGES DEFINITION
# -----------------------------------------------------------------------------
# Stages define the sequential phases of the CI/CD pipeline
# Each stage can contain multiple jobs that run in parallel
# Stages execute in the order defined here, and failure in any stage stops the pipeline
stages:
  - validate    # Stage 1: Syntax and configuration validation
  - build      # Stage 2: Compile and package applications
  - test       # Stage 3: Execute automated test suites
  - security   # Stage 4: Security scanning and vulnerability assessment
  - deploy     # Stage 5: Environment deployment and verification

# STAGE FLOW ANALYSIS:
# validate → build → test → security → deploy
# Each stage acts as a quality gate, preventing problematic code from advancing

# -----------------------------------------------------------------------------
# GLOBAL PIPELINE VARIABLES
# -----------------------------------------------------------------------------
# Variables section defines environment variables available to all jobs
# These variables provide configuration and avoid hardcoding values
variables:
  # Kubernetes namespace for deployment
  # This variable is used across multiple jobs for consistent deployment targeting
  NAMESPACE: petclinic
  # SECURITY NOTE: Namespace isolation provides deployment boundary control
  
  # Docker registry URL for container image storage
  # $CI_REGISTRY is a GitLab predefined variable pointing to the project's container registry
  DOCKER_REGISTRY: $CI_REGISTRY
  # BENEFIT: Uses GitLab's integrated container registry for seamless image management
  
  # Container image tag based on Git commit SHA
  # $CI_COMMIT_SHA provides unique, immutable tagging for each build
  IMAGE_TAG: $CI_COMMIT_SHA
  # TRACEABILITY: Enables precise tracking of which code version is deployed

# -----------------------------------------------------------------------------
# VALIDATION STAGE - CONFIGURATION AND SYNTAX CHECKING
# -----------------------------------------------------------------------------
# Job name: validate
# PURPOSE: Catch configuration errors early before expensive build operations
validate:
  # Stage assignment - this job runs in the validate stage
  stage: validate
  
  # Script section contains the commands executed by this job
  script:
    # Human-readable output for pipeline visibility
    - echo "Validating Kubernetes manifests..."
    
    # Kubernetes dry-run validation of all manifest files
    # --dry-run=client: Validates syntax and schema without applying to cluster
    # -f k8s-manifests/: Specifies the directory containing Kubernetes YAML files
    # -R: Recursive flag to process all subdirectories
    - kubectl --dry-run=client apply -f k8s-manifests/ -R
    # SECURITY BENEFIT: Prevents deployment of malformed configurations
    # EFFICIENCY: Catches errors early, saving build time and resources
  
  # Branch restrictions - this job only runs on specific branches
  only:
    - main      # Production branch - always validate before deployment
    - develop   # Development branch - validate before staging deployment
  # BRANCH STRATEGY: Protects critical branches while allowing feature branch flexibility

# -----------------------------------------------------------------------------
# BUILD STAGE - APPLICATION COMPILATION AND PACKAGING
# -----------------------------------------------------------------------------
# Job name: build
# PURPOSE: Compile Java applications and create deployable artifacts
build:
  # Stage assignment - runs after successful validation
  stage: build
  
  # Build commands
  script:
    # Progress indicator for pipeline visibility
    - echo "Building Spring Boot applications..."
    
    # Navigate to the source code directory
    # This assumes the Spring Boot microservices are in a specific directory structure
    - cd source-code/spring-petclinic-microservices
    
    # Maven wrapper execution for building all microservices
    # clean: Removes previous build artifacts for clean builds
    # package: Compiles code and creates JAR files
    # -DskipTests: Skips test execution during build (tests run in separate stage)
    - ./mvnw clean package -DskipTests
    # EFFICIENCY: Separating build and test stages allows parallel execution
    # ARTIFACT CREATION: Produces JAR files for containerization
  
  # Artifacts configuration - preserves build outputs for subsequent stages
  artifacts:
    # Paths to preserve after job completion
    paths:
      # Wildcard pattern to capture all JAR files from all microservices
      - source-code/spring-petclinic-microservices/*/target/*.jar
      # PATTERN EXPLANATION: */target/*.jar captures JARs from all service subdirectories
    
    # Artifact retention period
    expire_in: 1 hour
    # OPTIMIZATION: Short retention saves storage while providing sufficient time for deployment
    # SECURITY: Reduces exposure window for build artifacts

# -----------------------------------------------------------------------------
# TEST STAGE - AUTOMATED QUALITY ASSURANCE
# -----------------------------------------------------------------------------
# Job name: test
# PURPOSE: Execute comprehensive test suites to ensure code quality
test:
  # Stage assignment - runs after successful build
  stage: test
  
  # Test execution commands
  script:
    # Progress indicator
    - echo "Running tests..."
    
    # Navigate to source directory
    - cd source-code/spring-petclinic-microservices
    
    # Execute Maven test phase
    # This runs unit tests, integration tests, and generates coverage reports
    - ./mvnw test
    # TEST TYPES: Unit tests, integration tests, and component tests
    # QUALITY GATE: Pipeline fails if any tests fail
  
  # Coverage reporting configuration
  # Regular expression to extract coverage percentage from test output
  coverage: '/Total.*?([0-9]{1,3})%/'
  # REGEX EXPLANATION: Matches "Total" followed by percentage value
  # GITLAB INTEGRATION: Coverage percentage appears in merge requests and pipeline view
  # QUALITY METRICS: Enables coverage tracking and quality trend analysis

# -----------------------------------------------------------------------------
# SECURITY STAGE - VULNERABILITY ASSESSMENT AND COMPLIANCE
# -----------------------------------------------------------------------------
# Job name: security-scan
# PURPOSE: Implement shift-left security practices with automated scanning
security-scan:
  # Stage assignment - runs after successful tests
  stage: security
  
  # Security scanning commands
  script:
    # Progress indicator
    - echo "Running security scans..."
    
    # Placeholder for SAST (Static Application Security Testing)
    - echo "SAST scan completed"
    # PRODUCTION IMPLEMENTATION: Replace with actual SAST tools like:
    # - SonarQube for code quality and security
    # - Checkmarx for static analysis
    # - Veracode for comprehensive security scanning
    
    # Placeholder for container security scanning
    - echo "Container scan completed"
    # PRODUCTION IMPLEMENTATION: Replace with actual container scanners like:
    # - Trivy for vulnerability scanning
    # - Clair for container analysis
    # - Twistlock/Prisma Cloud for runtime protection
    
    # MISSING SECURITY SCANS (Production Recommendations):
    # - DAST (Dynamic Application Security Testing)
    # - Dependency vulnerability scanning
    # - Infrastructure as Code security scanning
    # - Secret detection and prevention

# -----------------------------------------------------------------------------
# STAGING DEPLOYMENT - PRE-PRODUCTION ENVIRONMENT
# -----------------------------------------------------------------------------
# Job name: deploy-staging
# PURPOSE: Deploy to staging environment for integration testing
deploy-staging:
  # Stage assignment - runs after successful security scans
  stage: deploy
  
  # Deployment commands
  script:
    # Progress indicator
    - echo "Deploying to staging..."
    
    # Execute deployment script
    # This script should handle Kubernetes deployment, service updates, and configuration
    - ./scripts/deployment/deploy-all.sh
    # SCRIPT RESPONSIBILITY: Kubernetes manifest application, rolling updates, health checks
    
    # Execute smoke tests after deployment
    # Smoke tests verify basic functionality in the deployed environment
    - ./validation/smoke-tests.sh
    # VALIDATION: Ensures deployment was successful and basic features work
  
  # Environment configuration for GitLab environments feature
  environment:
    # Environment name for tracking and management
    name: staging
    # URL for accessing the staging environment
    url: http://staging.petclinic.local
    # GITLAB INTEGRATION: Provides environment tracking and deployment history
  
  # Branch restrictions - only deploy staging from develop branch
  only:
    - develop
  # BRANCHING STRATEGY: Develop branch represents latest stable development code

# -----------------------------------------------------------------------------
# PRODUCTION DEPLOYMENT - LIVE ENVIRONMENT
# -----------------------------------------------------------------------------
# Job name: deploy-production
# PURPOSE: Deploy to production environment with comprehensive validation
deploy-production:
  # Stage assignment - final deployment stage
  stage: deploy
  
  # Production deployment commands
  script:
    # Progress indicator
    - echo "Deploying to production..."
    
    # Execute production deployment script
    # Should include blue-green deployment, canary releases, or rolling updates
    - ./scripts/deployment/deploy-all.sh
    # PRODUCTION CONSIDERATIONS: Zero-downtime deployment, rollback capability
    
    # Execute comprehensive test suite in production
    # More extensive testing than staging smoke tests
    - ./validation/comprehensive-tests.sh
    # VALIDATION SCOPE: End-to-end tests, performance tests, security tests
  
  # Production environment configuration
  environment:
    # Environment name
    name: production
    # Production URL
    url: http://petclinic.local
    # MONITORING: Production environment should have comprehensive monitoring
  
  # Branch restrictions - only deploy production from main branch
  only:
    - main
  # BRANCH PROTECTION: Main branch represents production-ready code
  
  # Manual deployment gate
  when: manual
  # SAFETY CONTROL: Requires human approval before production deployment
  # COMPLIANCE: Meets change management requirements for production changes

# =============================================================================
# PIPELINE ANALYSIS AND PRODUCTION RECOMMENDATIONS
# =============================================================================
#
# CURRENT PIPELINE STRENGTHS:
# ✅ Clear stage separation with logical flow
# ✅ Branch-based deployment strategy
# ✅ Manual approval for production deployments
# ✅ Artifact management with appropriate retention
# ✅ Environment tracking and URL management
# ✅ Test coverage reporting integration
#
# SECURITY GAPS AND IMPROVEMENTS NEEDED:
#
# 1. SECURITY SCANNING IMPLEMENTATION:
#    - Replace placeholder security scans with actual tools
#    - Add SAST: SonarQube, Checkmarx, or Veracode
#    - Add DAST: OWASP ZAP, Burp Suite, or Netsparker
#    - Add container scanning: Trivy, Clair, or Twistlock
#    - Add dependency scanning: OWASP Dependency Check, Snyk
#
# 2. SECRET MANAGEMENT:
#    - Implement secret detection (GitLeaks, TruffleHog)
#    - Use GitLab CI/CD variables for sensitive data
#    - Integrate with external secret management (HashiCorp Vault, AWS Secrets Manager)
#
# 3. COMPLIANCE AND GOVERNANCE:
#    - Add compliance scanning (CIS benchmarks, NIST frameworks)
#    - Implement policy as code (Open Policy Agent)
#    - Add audit logging and compliance reporting
#
# 4. DEPLOYMENT ENHANCEMENTS:
#    - Implement blue-green or canary deployment strategies
#    - Add automated rollback capabilities
#    - Include database migration handling
#    - Add performance testing gates
#
# 5. MONITORING AND OBSERVABILITY:
#    - Add deployment health checks
#    - Implement synthetic monitoring
#    - Include performance regression detection
#    - Add security monitoring integration
#
# PRODUCTION-READY GITLAB CI/CD VARIABLES:
# (Configure in GitLab Project Settings > CI/CD > Variables)
#
# DOCKER_REGISTRY_USER: Registry authentication username
# DOCKER_REGISTRY_PASSWORD: Registry authentication password (masked)
# KUBE_CONFIG: Base64 encoded Kubernetes config (file type)
# DATABASE_URL: Database connection string (masked)
# SECRET_KEY: Application secret key (masked)
# SONAR_TOKEN: SonarQube authentication token (masked)
# SLACK_WEBHOOK: Notification webhook URL (masked)
#
# RECOMMENDED ADDITIONAL JOBS:
#
# 1. code-quality:
#    - SonarQube analysis
#    - Code coverage gates
#    - Technical debt assessment
#
# 2. performance-test:
#    - Load testing with JMeter or K6
#    - Performance regression detection
#    - Resource utilization analysis
#
# 3. security-compliance:
#    - OWASP Top 10 scanning
#    - CIS benchmark compliance
#    - License compliance checking
#
# 4. notification:
#    - Slack/Teams integration
#    - Email notifications
#    - Deployment status updates
#
# =============================================================================
