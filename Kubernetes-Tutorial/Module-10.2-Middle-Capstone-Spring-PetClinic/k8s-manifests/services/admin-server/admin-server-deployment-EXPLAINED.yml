# =============================================================================
# SPRING BOOT ADMIN SERVER - COMPREHENSIVE MONITORING AND OBSERVABILITY DOCUMENTATION
# =============================================================================
# This file defines the Spring Boot Admin Server deployment, which provides a
# centralized monitoring and management interface for all Spring Boot microservices
# in the PetClinic ecosystem. Admin Server offers real-time monitoring, health checks,
# metrics visualization, and administrative operations across the entire application stack.
#
# OBSERVABILITY PHILOSOPHY: Centralized monitoring enables proactive issue detection,
# performance optimization, and operational insights across distributed microservices.
#
# OPERATIONAL IMPACT: Admin Server is critical for production operations, providing
# the primary interface for monitoring application health, performance, and troubleshooting.
# =============================================================================

# -----------------------------------------------------------------------------
# ADMIN SERVER DEPLOYMENT - CENTRALIZED MICROSERVICE MONITORING
# -----------------------------------------------------------------------------
# API version for Deployment resources
# apps/v1 provides stable deployment functionality for stateless monitoring services
apiVersion: apps/v1

# Resource type: Deployment for stateless monitoring application
# Deployments are suitable for Admin Server as it's stateless and focuses on monitoring
# The server aggregates data from microservices rather than storing persistent state
kind: Deployment

# Metadata section for Deployment identification
metadata:
  # Deployment name following monitoring service naming convention
  name: admin-server
  # NAMING CONVENTION: Clear identification as administrative/monitoring service
  
  # Namespace for application boundary and resource management
  namespace: petclinic
  
  # Labels for resource classification and management
  labels:
    # Application identifier for service grouping
    app: admin-server
    # MONITORING SERVICE: Dedicated to observability and administration
    
    # Component classification for architectural organization
    component: monitoring
    # MONITORING LAYER: Distinguishes from business logic and infrastructure services
    
    # Tier classification for network policies and access control
    tier: admin
    # ADMINISTRATIVE TIER: Special tier for management and monitoring services

# Deployment specification
spec:
  # Replica count for monitoring service availability
  replicas: 1
  # SINGLE INSTANCE: Sufficient for monitoring, consider 2+ for high availability
  # MONITORING PATTERN: Admin Server typically runs as single instance for simplicity
  
  # Selector for pod targeting and management
  selector:
    matchLabels:
      app: admin-server
      # TARGETING: Must match pod template labels exactly
  
  # Pod template defining the Admin Server container
  template:
    metadata:
      # Labels applied to each pod instance
      labels:
        app: admin-server
        component: monitoring
        tier: admin
        # CONSISTENCY: Labels match Deployment and selector requirements
    
    # Pod specification
    spec:
      # Container array for Admin Server deployment
      containers:
      - # Container name for identification and logging
        name: admin-server
        
        # Spring Boot Admin Server container image
        image: springcommunity/spring-petclinic-admin-server:3.2.0
        # VERSION PINNING: Specific version ensures consistent monitoring behavior
        # SPRING COMMUNITY: Official PetClinic Admin Server image
        # VERSION 3.2.0: Matches PetClinic application version for compatibility
        
        # Container port configuration
        ports:
        - # Admin Server default port
          containerPort: 9090
          # Port name for service targeting and monitoring
          name: http
          # ADMIN PORT: Standard port for Spring Boot Admin Server
          # HTTP PROTOCOL: Web-based monitoring interface
        
        # Environment variables for Admin Server configuration
        env:
        # Spring profile activation for Kubernetes environment
        - name: SPRING_PROFILES_ACTIVE
          value: "kubernetes"
          # ENVIRONMENT SPECIFIC: Activates Kubernetes-specific monitoring configuration
          # PROFILE STRATEGY: Enables environment-specific behavior and service discovery
        
        # Config Server URL for centralized configuration
        - name: CONFIG_SERVER_URL
          value: "http://config-server:8888"
          # CONFIGURATION DEPENDENCY: Admin Server retrieves configuration from Config Server
          # SERVICE DISCOVERY: Uses Kubernetes DNS for Config Server resolution
        
        # Discovery Server URL for service registration and discovery
        - name: DISCOVERY_SERVER_URL
          value: "http://discovery-server:8761/eureka"
          # SERVICE DISCOVERY: Admin Server discovers microservices through Eureka
          # MONITORING SCOPE: Automatically monitors all registered services
        
        # Actuator endpoints exposure for comprehensive monitoring
        - name: MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE
          value: "*"
          # FULL MONITORING: Exposes all actuator endpoints for complete observability
          # ADMINISTRATIVE ACCESS: Enables all management and monitoring capabilities
          # SECURITY CONSIDERATION: In production, consider limiting to specific endpoints
        
        # Resource allocation for Admin Server workload
        resources:
          # Guaranteed resources for baseline monitoring performance
          requests:
            # Memory allocation for Spring Boot application and monitoring data
            memory: "512Mi"
            # BASELINE MEMORY: Sufficient for Admin Server and monitoring data aggregation
            
            # CPU allocation for monitoring operations and web interface
            cpu: "250m"
            # BASELINE CPU: Quarter core adequate for monitoring and dashboard serving
          
          # Resource limits to prevent resource monopolization
          limits:
            # Maximum memory to prevent node pressure
            memory: "1Gi"
            # BURST CAPACITY: Double baseline for intensive monitoring operations
            
            # Maximum CPU for fair resource sharing
            cpu: "500m"
            # BURST CAPACITY: Half core for peak monitoring and dashboard activity
        
        # Liveness probe for container health monitoring
        livenessProbe:
          # HTTP GET request for health verification
          httpGet:
            # Spring Boot Actuator health endpoint
            path: /actuator/health
            # Admin Server port
            port: 9090
          # HEALTH ENDPOINT: Spring Boot provides comprehensive health information
          
          # Initial delay for application startup completion
          initialDelaySeconds: 120
          # EXTENDED STARTUP: Admin Server needs time to discover and connect to services
          # DEPENDENCY WAIT: Allows time for Config Server and Discovery Server startup
          
          # Probe execution frequency
          periodSeconds: 30
          # MONITORING FREQUENCY: Less frequent for monitoring service stability
          
          # Timeout for each probe execution
          timeoutSeconds: 10
          # RESPONSIVENESS: Generous timeout for health check processing
          
          # Failure threshold before pod restart
          failureThreshold: 3
          # STABILITY: Multiple failures required before restart
        
        # Readiness probe for traffic routing decisions
        readinessProbe:
          # HTTP GET request for readiness verification
          httpGet:
            # Same health endpoint for readiness
            path: /actuator/health
            # Admin Server port
            port: 9090
          # READINESS VERIFICATION: Ensures Admin Server can serve monitoring interface
          
          # Initial delay for readiness checking
          initialDelaySeconds: 90
          # STARTUP OPTIMIZATION: Shorter delay than liveness but still generous
          # SERVICE DEPENDENCY: Allows time for service discovery completion
          
          # Readiness check frequency
          periodSeconds: 10
          # TRAFFIC ROUTING: Frequent checks for responsive monitoring interface
          
          # Timeout for readiness verification
          timeoutSeconds: 5
          # QUICK RESPONSE: Fast timeout for traffic routing decisions
          
          # Failure threshold before removing from service
          failureThreshold: 3
          # SERVICE AVAILABILITY: Multiple failures before traffic removal

---
# Document separator for Service resource

# -----------------------------------------------------------------------------
# ADMIN SERVER SERVICE - NETWORK ACCESS FOR MONITORING INTERFACE
# -----------------------------------------------------------------------------
# API version for Service resources
apiVersion: v1

# Resource type: Service for network access to Admin Server
kind: Service

# Service metadata
metadata:
  # Service name for DNS resolution and monitoring access
  name: admin-server
  # MONITORING ACCESS: Operators and tools connect using this service name
  
  # Namespace consistency with Deployment
  namespace: petclinic
  
  # Labels for service identification and management
  labels:
    app: admin-server
    component: monitoring
    # CONSISTENCY: Matches Deployment labels for unified management

# Service specification
spec:
  # Selector for targeting Admin Server pods
  selector:
    app: admin-server
    # POD TARGETING: Routes traffic to Admin Server pods
  
  # Port configuration for monitoring interface access
  ports:
  - # Service port for monitoring interface connections
    port: 9090
    # Target port on Admin Server pods
    targetPort: 9090
    # Port name for identification
    name: http
    # MONITORING PROTOCOL: HTTP web interface for monitoring dashboard
  
  # Service type for cluster-internal access
  type: ClusterIP
  # INTERNAL ACCESS: Admin Server accessible within cluster
  # SECURITY: Monitoring interface should be protected from external access

# =============================================================================
# SPRING BOOT ADMIN SERVER ARCHITECTURE ANALYSIS
# =============================================================================
#
# ADMIN SERVER CAPABILITIES:
# ✅ CENTRALIZED MONITORING: Single dashboard for all microservice health and metrics
# ✅ REAL-TIME HEALTH CHECKS: Live status monitoring across all services
# ✅ METRICS VISUALIZATION: Performance metrics, JVM stats, and custom metrics
# ✅ LOG AGGREGATION: Centralized log viewing and searching capabilities
# ✅ CONFIGURATION MANAGEMENT: Runtime configuration viewing and modification
# ✅ THREAD DUMP ANALYSIS: JVM thread analysis for performance troubleshooting
# ✅ HEAP DUMP ANALYSIS: Memory usage analysis and leak detection
# ✅ NOTIFICATION SYSTEM: Alerts for service failures and performance issues
#
# MONITORING INTEGRATION POINTS:
# ✅ SERVICE DISCOVERY: Automatic discovery of microservices through Eureka
# ✅ ACTUATOR INTEGRATION: Deep integration with Spring Boot Actuator endpoints
# ✅ CONFIG SERVER: Centralized configuration for monitoring settings
# ✅ METRICS COLLECTION: Integration with Micrometer and Prometheus
# ✅ NOTIFICATION CHANNELS: Slack, email, and webhook notifications
#
# PRODUCTION ENHANCEMENTS NEEDED:
#
# 1. SECURITY CONFIGURATION:
#    # Authentication and authorization for Admin Server
#    env:
#    - name: SPRING_SECURITY_USER_NAME
#      valueFrom:
#        secretKeyRef:
#          name: admin-server-secrets
#          key: username
#    - name: SPRING_SECURITY_USER_PASSWORD
#      valueFrom:
#        secretKeyRef:
#          name: admin-server-secrets
#          key: password
#    
#    # HTTPS configuration for secure access
#    - name: SERVER_SSL_ENABLED
#      value: "true"
#    - name: SERVER_SSL_KEY_STORE
#      value: "/etc/ssl/keystore.p12"
#
# 2. HIGH AVAILABILITY SETUP:
#    spec:
#      replicas: 2  # Multiple instances for availability
#      strategy:
#        type: RollingUpdate
#        rollingUpdate:
#          maxUnavailable: 1
#          maxSurge: 1
#
# 3. PERSISTENT STORAGE FOR MONITORING DATA:
#    # Volume for storing monitoring history and configurations
#    volumeMounts:
#    - name: admin-data
#      mountPath: /var/lib/admin-server
#    volumes:
#    - name: admin-data
#      persistentVolumeClaim:
#        claimName: admin-server-storage
#
# 4. NOTIFICATION CONFIGURATION:
#    # Slack integration for alerts
#    env:
#    - name: SPRING_BOOT_ADMIN_NOTIFY_SLACK_WEBHOOK_URL
#      valueFrom:
#        secretKeyRef:
#          name: admin-server-secrets
#          key: slack-webhook
#    
#    # Email notification setup
#    - name: SPRING_BOOT_ADMIN_NOTIFY_MAIL_HOST
#      value: "smtp.company.com"
#    - name: SPRING_BOOT_ADMIN_NOTIFY_MAIL_USERNAME
#      valueFrom:
#        secretKeyRef:
#          name: admin-server-secrets
#          key: email-username
#
# MONITORING DASHBOARD FEATURES:
#
# 1. SERVICE OVERVIEW:
#    # Real-time service status grid
#    # Health indicator aggregation
#    # Service dependency visualization
#    # Performance metrics summary
#
# 2. DETAILED SERVICE MONITORING:
#    # JVM metrics (heap, non-heap, GC)
#    # HTTP request metrics (count, duration, errors)
#    # Database connection pool status
#    # Custom application metrics
#
# 3. OPERATIONAL TOOLS:
#    # Log level management at runtime
#    # Environment property viewing
#    # Thread dump generation and analysis
#    # Heap dump generation for memory analysis
#
# 4. ALERTING AND NOTIFICATIONS:
#    # Service down notifications
#    # Performance threshold alerts
#    # Custom metric-based alerts
#    # Integration with external alerting systems
#
# INTEGRATION WITH EXTERNAL MONITORING:
#
# 1. PROMETHEUS INTEGRATION:
#    # Metrics export to Prometheus
#    management:
#      endpoints:
#        web:
#          exposure:
#            include: prometheus
#      metrics:
#        export:
#          prometheus:
#            enabled: true
#
# 2. GRAFANA DASHBOARD:
#    # Custom Grafana dashboards for Admin Server data
#    # Integration with Prometheus metrics
#    # Advanced visualization and alerting
#
# 3. ELK STACK INTEGRATION:
#    # Log aggregation through Logstash
#    # Elasticsearch for log storage and search
#    # Kibana for log visualization and analysis
#
# SECURITY CONSIDERATIONS:
#
# 1. ACCESS CONTROL:
#    # Role-based access to monitoring features
#    # Authentication for Admin Server access
#    # Authorization for administrative operations
#    # Audit logging for monitoring activities
#
# 2. NETWORK SECURITY:
#    # Internal-only access through ClusterIP
#    # VPN or bastion host for external access
#    # Network policies for traffic control
#    # TLS encryption for data in transit
#
# 3. DATA PROTECTION:
#    # Sensitive data masking in logs and metrics
#    # Secure storage of monitoring configurations
#    # Encryption of monitoring data at rest
#    # Regular security updates and patches
#
# OPERATIONAL PROCEDURES:
#
# 1. MONITORING WORKFLOWS:
#    # Daily health check reviews
#    # Performance trend analysis
#    # Capacity planning based on metrics
#    # Incident response using monitoring data
#
# 2. MAINTENANCE PROCEDURES:
#    # Regular Admin Server updates
#    # Monitoring configuration reviews
#    # Alert threshold tuning
#    # Dashboard customization and optimization
#
# 3. TROUBLESHOOTING GUIDES:
#    # Service discovery issues
#    # Monitoring data collection problems
#    # Performance bottleneck identification
#    # Alert fatigue management
#
# COMPLIANCE AND GOVERNANCE:
# - Monitoring data retention policies
# - Access logging and audit trails
# - Compliance reporting from monitoring data
# - Data privacy considerations for monitoring
# - Regular monitoring system assessments
#
# =============================================================================
