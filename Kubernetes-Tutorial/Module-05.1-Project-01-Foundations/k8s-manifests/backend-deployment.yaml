# E-commerce Backend Deployment
# This manifest deploys the e-commerce backend application with proper configuration

# =============================================================================
# DEPLOYMENT OVERVIEW
# =============================================================================
# Purpose: Deploys and manages the e-commerce backend application
# Why Deployment: Provides rolling updates, rollbacks, and replica management
# Kubernetes concept: Deployment is a higher-level abstraction that manages ReplicaSets

apiVersion: apps/v1
# API Version: apps/v1 is the stable version for Deployment resources
# This version includes features like rolling updates and rollback capabilities

kind: Deployment
# Resource Type: Deployment manages a set of identical pods
# Provides declarative updates for Pods and ReplicaSets

metadata:
  # Metadata section contains identifying information about the deployment
  name: ecommerce-backend
  # Name: Unique identifier for the deployment within the namespace
  # This name will be used to reference the deployment in other resources
  
  namespace: ecommerce
  # Namespace: Specifies which namespace this deployment belongs to
  # Must match the namespace created in namespace.yaml
  
  labels:
    # Labels: Key-value pairs for organizing and selecting resources
    app: ecommerce-backend
    # app: ecommerce-backend - Identifies this as the backend application
    version: v1.0.0
    # version: v1.0.0 - Tracks the application version for rollback purposes
    environment: development
    # environment: development - Indicates this is a development environment
    component: backend
    # component: backend - Identifies this as the backend component
  
  annotations:
    # Annotations: Additional metadata that doesn't affect resource behavior
    deployment.kubernetes.io/revision: "1"
    # deployment.kubernetes.io/revision: "1" - Tracks deployment revision number
    # This is automatically managed by Kubernetes for rollback purposes
    description: "E-commerce backend application deployment"
    # description: Human-readable description of the deployment purpose
spec:
  # Number of replicas for high availability
  replicas: 2
  
  # Deployment strategy for rolling updates
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  
  # Selector for pod management
  selector:
    matchLabels:
      app: ecommerce-backend
      version: v1.0.0
  
  # Pod template
  template:
    metadata:
      labels:
        app: ecommerce-backend
        version: v1.0.0
        environment: development
        component: backend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    
    spec:
      # Security context for the pod
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      
      # Service account for RBAC
      serviceAccountName: ecommerce-backend-sa
      
      # Restart policy
      restartPolicy: Always
      
      # Termination grace period
      terminationGracePeriodSeconds: 30
      
      # Containers
      containers:
      - name: ecommerce-backend
        image: ecommerce-backend:v1.0.0
        imagePullPolicy: IfNotPresent
        
        # Port configuration
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        
        # Environment variables
        env:
        - name: ENVIRONMENT
          value: "development"
        - name: LOG_LEVEL
          value: "INFO"
        - name: PORT
          value: "8000"
        - name: HOST
          value: "0.0.0.0"
        
        # Resource requests and limits
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
            ephemeral-storage: "1Gi"
          limits:
            memory: "512Mi"
            cpu: "500m"
            ephemeral-storage: "2Gi"
        
        # Health checks
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        
        startupProbe:
          httpGet:
            path: /health
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 30
        
        # Security context for the container
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          capabilities:
            drop:
            - ALL
        
        # Volume mounts
        volumeMounts:
        - name: uploads
          mountPath: /app/uploads
          readOnly: false
        - name: config
          mountPath: /app/config
          readOnly: true
        - name: tmp
          mountPath: /tmp
          readOnly: false
        - name: logs
          mountPath: /app/logs
          readOnly: false
        
        # Lifecycle hooks
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "sleep 15"]
      
      # Volumes
      volumes:
      - name: uploads
        emptyDir:
          sizeLimit: 1Gi
      - name: config
        configMap:
          name: ecommerce-config
          defaultMode: 420
      - name: tmp
        emptyDir:
          sizeLimit: 1Gi
      - name: logs
        emptyDir:
          sizeLimit: 1Gi
      
      # Node selection
      nodeSelector:
        kubernetes.io/os: linux
      
      # Tolerations for node scheduling
      tolerations:
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      
      # Affinity rules
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - ecommerce-backend
              topologyKey: kubernetes.io/hostname
